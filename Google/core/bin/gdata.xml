<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Google.GData.Client</name>
    </assembly>
    <members>
        <member name="T:Google.GData.Client.AbstractEntry">
            <summary>
            Entry API customization class for defining entries in a custom feed
            </summary>
        </member>
        <member name="M:Google.GData.Client.AbstractEntry.#ctor">
            <summary>
            default constructor, adding app:edited and etag extensions
            </summary>
        </member>
        <member name="M:Google.GData.Client.AbstractEntry.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>
            base implementation, as with the abstract feed, we are adding
            the gnamespace
            </summary>
            <param name="writer">The XmlWrite, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AbstractEntry.SkipNode(System.Xml.XmlNode)">
            <summary>
            Checks if this is a namespace declaration that we already added
            </summary>
            <param name="node">XmlNode to check</param>
            <returns>True if this node should be skipped</returns>
        </member>
        <member name="M:Google.GData.Client.AbstractEntry.ToggleCategory(Google.GData.Client.AtomCategory,System.Boolean)">
            <summary>
            helper to toggle categories
            </summary>
            <param name="cat"></param>
            <param name="value"></param>
        </member>
        <member name="P:Google.GData.Client.AbstractEntry.MediaSource">
            <summary>access the associated media element. Note, that setting this
            WILL cause subsequent updates to be done using MIME multipart posts
            </summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AbstractEntry.Etag">
            <summary>returns this entries etag, if any
            This is a protocol version 2 feature
            </summary>
        </member>
        <member name="P:Google.GData.Client.AbstractEntry.Edited">
            <summary>
            returns the app:edited element of the entry, if any. 
            This is a protocol version 2 feature
            </summary>
        </member>
        <member name="M:Google.GData.Client.AbstractEntry.GetExtensionValue(System.String,System.String)">
            <summary>
            we have one string based getter
            usage is: entry.getExtensionValue("namespace", "tagname") to get the elements value
            </summary>
            <param name="extension">the name of the extension to look for</param>
            <param name="ns">the namespace of the extension to look for</param>
            <returns>value as string, or NULL if the extension was not found</returns>
        </member>
        <member name="M:Google.GData.Client.AbstractEntry.SetExtensionValue(System.String,System.String,System.String)">
            <summary>
            we have one string based setter
            usage is: entry.setExtensionValue("tagname", "ns", "value") to set the element
            this will create the extension if it's not there
            note, you can ofcourse, just get an existing one and work with that 
            object: 
            </summary>
            <param name="extension">the name of the extension to look for</param>
            <param name="ns">the namespace of the extension to look for</param>
            <param name="newValue">the new value for this extension element</param>
            <returns>SimpleElement, either a brand new one, or the one
            returned by the service</returns>
        </member>
        <member name="T:Google.GData.Client.AbstractFeed">
            <summary>Base class to read gData feeds in Atom, with the extension of
            setting up extension element parsing
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.#ctor(System.Uri,Google.GData.Client.IService)">
            <summary>
            Constructor, set's up extension handlers
            </summary>
            <param name="uriBase">The uri for this cells feed.</param>
            <param name="service">The Spreadsheets service.</param>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>extension feeds most likely add the GData namespace, so let's 
            have a default implementation that does this</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added. As the abstract feed adds
            the GData namespace, check that one</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.OnParsedNewAbstractEntry(System.Object,Google.GData.Client.FeedParserEventArgs)">
            <summary>
            Eventhandling. Called when a new entry is parsed.
            </summary>
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.CreateFeedEntry">
            <summary>
            this needs to get implemented by subclasses
            </summary>
            <returns>AtomEntry</returns>
        </member>
        <member name="P:Google.GData.Client.AbstractFeed.Etag">
            <summary>returns this entries etag, if any
            This is a protocol version 2 feature
            </summary>
        </member>
        <member name="T:Google.GData.Client.Service">
            <summary>async functionality of the Service implementation
            </summary> 
            <summary>base Service implementation</summary> 
        </member>
        <member name="M:Google.GData.Client.Service.QueryFeedAync(System.Uri,System.DateTime,System.Object)">
            <summary>
            the basic interface as an async version. This call will return directly
            and you need to rely on the events fired to figure out what happened.
            </summary>
            <param name="queryUri">the Uri to Query</param>
            <param name="ifModifiedSince">The ifmodifiedsince date, use DateTime.MinValue if you want everything</param>
            <param name="userData">The userData token. this must be unique if you make several async requests at once</param>
            <returns>nothing</returns>
        </member>
        <member name="M:Google.GData.Client.Service.QueryStreamAync(System.Uri,System.DateTime,System.Object)">
            <summary>
            the basic interface as an async version. This call will return directly
            and you need to rely on the events fired to figure out what happened.
            this version does not parse the response from the webserver but 
            provides it to you in the event
            </summary>
            <param name="queryUri">the Uri to Query</param>
            <param name="ifModifiedSince">The ifmodifiedsince date, use DateTime.MinValue if you want everything</param>
            <param name="userData">The userData token. this must be unique if you make several async requests at once</param>
            <returns>nothing</returns>
        </member>
        <member name="M:Google.GData.Client.Service.QueryAsync(System.Uri,System.DateTime,System.Boolean,System.Object)">
            <summary>
            the basic interface as an async version. This call will return directly
            and you need to rely on the events fired to figure out what happened.
            </summary>
            <param name="queryUri">the Uri to Query</param>
            <param name="ifModifiedSince">The ifmodifiedsince date, use DateTime.MinValue if you want everything</param>
            <param name="doParse">if true, returns a feed, else a stream</param>
            <param name="userData">The userData token. this must be unique if you make several async requests at once</param>
            <returns>nothing</returns>
        </member>
        <member name="M:Google.GData.Client.Service.AsyncQueryWorker(Google.GData.Client.AsyncQueryData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
             worker method for the query case
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.UpdateAsync(Google.GData.Client.AtomEntry,System.Object)">
            <summary>
            updates the entry asynchronous, you need to supply a valid and unique
            token. Events will be send to the async delegates you setup on the service
            object
            </summary>
            <param name="entry"></param>
            <param name="userData">a unique identifier to associate this request with</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.InsertAsync(System.Uri,Google.GData.Client.AtomEntry,System.Object)">
            <summary>
            inserts the entry asynchronous, you need to supply a valid and unique
            token. Events will be send to the async delegates you setup on the service
            object
            </summary>
            <param name="feedUri">the target feed the entry get's inserted into</param>
            <param name="entry"></param>
            <param name="userData">a unique identifier to associate this request with</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.BatchAsync(Google.GData.Client.AtomFeed,System.Uri,System.Object)">
            <summary>
            takes a given feed, and does a batch post of that feed
            against the batchUri parameter. If that one is NULL 
            it will try to use the batch link URI in the feed
            </summary>
            <param name="feed">the feed to post</param>
            <param name="batchUri">the URI to user</param>
            <param name="userData">the userdata identifying this request</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.StreamSendFeedAsync(System.Uri,System.IO.Stream,Google.GData.Client.GDataRequestType,System.String,System.String,System.Object)">
            <summary>
            this is a helper function for to send binary data asyncronous to a resource
            The async returned object will contain the output Feed
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="userData">a unique identifier to associate this request with</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.StreamSendStreamAsync(System.Uri,System.IO.Stream,Google.GData.Client.GDataRequestType,System.String,System.String,System.Object)">
            <summary>
            this is a helper function for to send binary data asyncronous to a resource
            The async returned object will contain the output stream
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="userData">a unique identifier to associate this request with</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.StreamSendAsync(System.Uri,System.IO.Stream,Google.GData.Client.GDataRequestType,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            this is a helper function for to send binary data asyncronous to a resource
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="userData">a unique identifier to associate this request with</param>
            <param name="parseFeed">indicates if the async operation should try to parse the server returned stream, or just return the stream</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.HandleResponseStream(Google.GData.Client.AsyncData,System.IO.Stream,System.Int64)">
            <summary>
            handles the response stream
            copies it into the memory stream, or parses it into a feed.
            </summary>
            <param name="data"></param>
            <param name="responseStream"></param>
            <param name="contentLength"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.AsyncUpdateWorker(Google.GData.Client.AsyncSendData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method for the update case
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.AsyncInsertWorker(Google.GData.Client.AsyncSendData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method for the Insert case
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.AsyncBatchWorker(Google.GData.Client.AsyncSendData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
             worker method for the batch case
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.AsyncStreamSendWorker(Google.GData.Client.AsyncSendData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method for the direct stream send
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.AsyncStarter(Google.GData.Client.AsyncSendData,Google.GData.Client.Service.WorkerSendEventHandler,System.Object)">
            <summary>
            starts the async job
            </summary>
            <param name="data"></param>
            <param name="userData"></param>
            <param name="workerDelegate"></param>
            <returns></returns>
        </member>
        <member name="F:Google.GData.Client.Service.credentials">
            <summary>holds the credential information</summary> 
        </member>
        <member name="F:Google.GData.Client.Service.factory">
            <summary>the GDatarequest to use</summary> 
        </member>
        <member name="E:Google.GData.Client.Service.NewAtomEntry">
            <summary>holds the hooks for the eventing in the feedparser</summary> 
        </member>
        <member name="E:Google.GData.Client.Service.NewExtensionElement">
            <summary>eventhandler, when the parser finds a new extension element-> mirrored from underlying parser</summary> 
        </member>
        <member name="E:Google.GData.Client.Service.NewFeed">
            <summary>eventhandler, when the service needs to create a new feed</summary> 
        </member>
        <member name="M:Google.GData.Client.Service.#ctor">
            <summary>default constructor, sets the default GDataRequest</summary> 
        </member>
        <member name="M:Google.GData.Client.Service.#ctor(System.String)">
            <summary>default constructor, sets the default GDataRequest</summary> 
        </member>
        <member name="M:Google.GData.Client.Service.#ctor(System.String,System.String)">
            <summary>this will trigger the creation of an authenticating service</summary> 
        </member>
        <member name="P:Google.GData.Client.Service.ServiceIdentifier">
            <summary>
            this returns the string that the services uses to identify the google service to use
            when authentication with Google is required. Examples are "cl" for calendar, e.g. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Service.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Service.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.InitVersionInformation">
            <summary>
            by default all services now use version 2 for the protocol.
            this needs to be overridden by a service to specify otherwise. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Service.RequestFactory">
            <summary>accessor method public IGDataRequest Request</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.Service.OnRequestFactoryChanged">
            <summary>
            notifier if someone changes the requestfactory of the service. 
            This will cause the service to set the version number on the 
            request factory to its own
            </summary>
        </member>
        <member name="P:Google.GData.Client.Service.Credentials">
            <summary>accessor method public ICredentials Credentials</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.Service.QueryAuthenticationToken">
            <summary>
            if the service is using a Google Request Factory it will use that 
            assuming credentials are set to retrieve the authentication token
            for those credentials
            
            Note that this only works for ClientLogin, not for any other type of authentication
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Google.GData.Client.Service.QueryClientLoginToken">
            <summary>
            if the service is using a Google Request Factory it will use that 
            assuming credentials are set to retrieve the authentication token
            for those credentials
            
            Note that this only works for ClientLogin, not for any other type of authentication
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Google.GData.Client.Service.SetAuthenticationToken(System.String)">
            <summary>
            if the service is using a Google Request Factory it will set the passed 
            in token to the factory. NET CF does not support authsubtokens here
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Google.GData.Client.Service.setUserCredentials(System.String,System.String)">
            <summary>
            Sets the credentials of the user to authenticate requests
            to the server.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Google.GData.Client.Service.Query(System.Uri)">
            <summary>the basic interface. Take a URI and just get it</summary> 
            <param name="queryUri">the URI to execute</param>
            <returns> a webresponse object</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Query(System.Uri,System.DateTime)">
            <summary>the basic interface. Take a URI and just get it</summary> 
            <param name="queryUri">the URI to execute</param>
            <param name="ifModifiedSince">used to set a precondition date that 
            indicates the feed should be returned only if it has been modified 
            after the specified date. A value of DateTime.MinValue indicates no 
            precondition.</param>
            <returns> a webresponse object</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Query(System.Uri,System.String)">
            <summary>the basic interface. Take a URI and just get it</summary> 
            <param name="queryUri">the URI to execute</param>
            <param name="etag">used to set a precondition etag that 
            indicates the feed should be returned only if it has been modified </param>
            <returns> a webresponse object</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Query(System.Uri,System.DateTime,System.String,System.Int64@)">
            <summary>the basic interface. Take a URI and just get it</summary> 
            <param name="queryUri">the URI to execute</param>
            <param name="ifModifiedSince">used to set a precondition date that 
            indicates the feed should be returned only if it has been modified 
            after the specified date. A value of DateTime.MinValue indicates no 
            precondition.</param>
            <param name="etag">used to set a precondition etag that 
            indicates the feed should be returned only if it has been modified </param>
            <param name="contentLength">returns the content length of the response</param>
            <returns> a webresponse object</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Get(System.String)">
            <summary>
            Returns a single Atom entry based upon its unique URI.
            </summary>
            <param name="entryUri">The URI of the Atom entry.</param>
            <returns>AtomEntry representing the entry.</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Query(Google.GData.Client.FeedQuery)">
            <summary>executes the query and returns an AtomFeed object tree</summary> 
            <param name="feedQuery">the query parameters as a FeedQuery object </param>
            <returns>AtomFeed object tree</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Query(Google.GData.Client.FeedQuery,System.DateTime)">
            <summary>executes the query and returns an AtomFeed object tree</summary> 
            <param name="feedQuery">the query parameters as a FeedQuery object </param>
            <param name="ifModifiedSince">used to set a precondition date that 
            indicates the feed should be returned only if it has been modified 
            after the specified date. A value of null indicates no 
            precondition.</param>
            <returns>AtomFeed object tree</returns>
        </member>
        <member name="M:Google.GData.Client.Service.QueryOpenSearchRssDescription(System.Uri)">
            <summary>object QueryOpenSearchRssDescription()</summary> 
            <param name="serviceUri">the service to ask for an OpenSearchRss Description</param> 
            <returns> a webresponse object</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Update(Google.GData.Client.AtomEntry)">
            <summary>WebResponse Update(Uri updateUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="entry">the old entry to update</param> 
            <returns> the new Entry, as returned from the server</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Update``1(``0)">
            <summary>templated type safe verion of the interface</summary> 
            <param name="entry">the old entry to update</param> 
            <returns> the new Entry, as returned from the server</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Update(Google.GData.Client.AtomEntry,Google.GData.Client.AsyncSendData)">
            <summary>WebResponse Update(Uri updateUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="entry">the old entry to update</param> 
            <param name="data">the async data block used</param> 
            <returns> the new Entry, as returned from the server</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Google#GData#Client#IService#Insert(Google.GData.Client.AtomFeed,Google.GData.Client.AtomEntry)">
            <summary>public WebResponse Insert(Uri insertUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="feed">the feed this entry should be inserted into</param> 
            <param name="entry">the entry to be inserted</param> 
            <returns> the inserted entry</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Insert``1(Google.GData.Client.AtomFeed,``0)">
            <summary>
            templated type safe version of Insert
            </summary>
            <typeparam name="TEntry"></typeparam>
            <param name="feed"></param>
            <param name="entry"></param>
            <returns> the new Entry, as returned from the server</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Insert``1(System.Uri,``0)">
            <summary>templated type safe verion of the interface</summary> 
            <typeparam name="TEntry"></typeparam>
            <param name="feedUri"></param>
            <param name="entry">the old entry to update</param> 
            <returns> the new Entry, as returned from the server</returns> 
        </member>
        <member name="M:Google.GData.Client.Service.Insert``1(System.String,``0)">
            <summary>templated type safe verion of the interface</summary> 
            <typeparam name="TEntry"></typeparam>
            <param name="feedUri"></param>
            <param name="entry">the old entry to update</param> 
            <returns> the new Entry, as returned from the server</returns> 
        </member>
        <member name="M:Google.GData.Client.Service.internalInsert(System.Uri,Google.GData.Client.AtomEntry)">
            <summary>
            internal Insert version to avoid recursion in the template versions
            </summary>
            <param name="feedUri"></param>
            <param name="newEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.Insert(System.Uri,Google.GData.Client.AtomEntry,Google.GData.Client.AsyncSendData)">
            <summary>public WebResponse Insert(Uri insertUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="feedUri">the uri for the feed this entry should be inserted into</param> 
            <param name="newEntry">the entry to be inserted</param> 
            <param name="data">the data used for an async request</param>
            <returns> the inserted entry</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Update(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>
            simple update for media resources
            </summary>
            <param name="uriTarget"></param>
            <param name="input">the stream to send</param>
            <param name="contentType"></param>
            <param name="slugHeader">the value for the slug header, indicating filenaming</param>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Insert(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>
            Simple insert for media resources
            </summary>
            <param name="uriTarget"></param>
            <param name="input"></param>
            <param name="contentType"></param>
            <param name="slugHeader">the value for the slug header, indicating filenaming</param>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:Google.GData.Client.Service.CreateAndParseFeed(System.IO.Stream,System.Uri)">
            <summary>
            used to create a feed based on a stream
            </summary>
            <param name="inputStream"></param>
            <param name="uriToUse"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Service.EntrySend(System.Uri,Google.GData.Client.AtomEntry,Google.GData.Client.GDataRequestType)">
            <summary>Inserts an AtomBase entry against a Uri</summary> 
            <param name="feedUri">the uri for the feed this object should be posted against</param> 
            <param name="baseEntry">the entry to be inserted</param> 
            <param name="type">the type of request to create</param> 
            <returns> the response as a stream</returns>
        </member>
        <member name="M:Google.GData.Client.Service.EntrySend(System.Uri,Google.GData.Client.AtomBase,Google.GData.Client.GDataRequestType,Google.GData.Client.AsyncSendData)">
            <summary>Inserts an AtomBase entry against a Uri</summary> 
            <param name="feedUri">the uri for the feed this object should be posted against</param> 
            <param name="baseEntry">the entry to be inserted</param> 
            <param name="type">the type of request to create</param> 
            <param name="data">the async data payload</param>
            <returns> the response as a stream</returns>
        </member>
        <member name="M:Google.GData.Client.Service.StringSend(System.Uri,System.String,Google.GData.Client.GDataRequestType)">
            <summary>
            this is a helper function for external utilities. It is not worth
            running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="payload"></param>
            <param name="type"></param>
            <returns>Stream</returns>
        </member>
        <member name="M:Google.GData.Client.Service.StreamSend(System.Uri,System.IO.Stream,Google.GData.Client.GDataRequestType,System.String,System.String)">
            <summary>
            this is a helper function for to send binary data to a resource
            it is not worth running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <returns>Stream</returns>
        </member>
        <member name="M:Google.GData.Client.Service.StreamSend(System.Uri,System.IO.Stream,Google.GData.Client.GDataRequestType,System.String,System.String,System.String)">
            <summary>
            this is a helper function for to send binary data to a resource
            it is not worth running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="etag">The http etag to pass into the request</param>
            <returns>Stream</returns>
        </member>
        <member name="M:Google.GData.Client.Service.StreamSend(System.Uri,System.IO.Stream,Google.GData.Client.GDataRequestType,System.String,System.String,System.String,Google.GData.Client.AsyncSendData)">
            <summary>
            this is a helper function for to send binary data to a resource
            it is not worth running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="etag">The http etag to pass into the request</param>
            <param name="data">The async data needed for notifications</param>
            <returns>Stream from the server response. You should close this stream explicitly.</returns>
        </member>
        <member name="M:Google.GData.Client.Service.WriteInputStreamToRequest(System.IO.Stream,System.IO.Stream)">
            <summary>
            write the current stream to an output stream
            this is primarily used to write data to the 
            request stream
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Google.GData.Client.Service.CreateFeed(System.Uri)">
             <summary>creates a new feed instance to be returned by
             Batch(), Query() and other operations
            
             Subclasses can supply their own feed implementation by
             overriding this method.
             </summary>
        </member>
        <member name="M:Google.GData.Client.Service.Batch(Google.GData.Client.AtomFeed,System.Uri)">
            <summary>
            takes a given feed, and does a batch post of that feed
            against the batchUri parameter. If that one is NULL 
            it will try to use the batch link URI in the feed
            </summary>
            <param name="feed">the feed to post</param>
            <param name="batchUri">the URI to user</param>
            <returns>the returned AtomFeed</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Batch(Google.GData.Client.AtomFeed,System.Uri,Google.GData.Client.AsyncSendData)">
            <summary>
            takes a given feed, and does a batch post of that feed
            against the batchUri parameter. If that one is NULL 
            it will try to use the batch link URI in the feed
            </summary>
            <param name="feed">the feed to post</param>
            <param name="batchUri">the URI to user</param>
            <param name="data">The async data payload</param>
            <returns>the returned AtomFeed</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Delete(Google.GData.Client.AtomEntry)">
            <summary>deletes an Atom entry object</summary> 
            <param name="entry"> </param>
        </member>
        <member name="M:Google.GData.Client.Service.Delete(Google.GData.Client.AtomEntry,System.Boolean)">
            <summary>deletes an Atom entry object</summary> 
            <param name="entry">The entry to be deleted </param>
            <param name="permanentDelete">Should the entry be archived or not</param>
        </member>
        <member name="M:Google.GData.Client.Service.Delete(System.Uri)">
            <summary>Deletes an Atom entry when given a Uri</summary>
            <param name="uriTarget">The target Uri to call http delete against</param>
        </member>
        <member name="M:Google.GData.Client.Service.Delete(System.String)">
            <summary>Deletes an Atom entry when given a Uri</summary>
            <param name="uriTarget">The target Uri string to call http delete against</param>
        </member>
        <member name="M:Google.GData.Client.Service.Delete(System.Uri,System.String)">
            <summary>Deletes an Atom entry when given a Uri</summary>
            <param name="uriTarget">The target Uri to call http delete against</param>
            <param name="eTag">The eTag of the item to delete. This parameter is used for strong
             concurrency support in protocol version 2 and up</param>
        </member>
        <member name="M:Google.GData.Client.Service.OnParsedNewEntry(System.Object,Google.GData.Client.FeedParserEventArgs)">
            <summary>eventchaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.Service.OnNewExtensionElement(System.Object,Google.GData.Client.ExtensionElementEventArgs)">
            <summary>eventchaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user, and if he did not dicscard it, we add the entry to our
            collection</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.BaseIsDirty">
            <summary>
            Helper object to walk the tree for the dirty flag.
            </summary> 
        </member>
        <member name="M:Google.GData.Client.BaseIsDirty.Go(Google.GData.Client.AtomBase)">
            <summary>Walker action. Just gets a property.</summary> 
            <param name="atom">object to set the property on</param>
            <returns>the value of the dirty flag</returns>
        </member>
        <member name="T:Google.GData.Client.BaseMarkDirty">
            <summary>
            Helper object to walk the tree for the dirty flag.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.BaseMarkDirty.flag">
            <summary>Holds if set/unset to dirty.</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseMarkDirty.#ctor(System.Boolean)">
            <summary>Constructor.</summary> 
            <param name="flag">indicates the value to pass </param>
        </member>
        <member name="M:Google.GData.Client.BaseMarkDirty.Go(Google.GData.Client.AtomBase)">
            <summary>Walker action. Just sets a property.</summary> 
            <param name="atom">object to set the property on </param>
            <returns> always false, indicating to walk the whole tree</returns>
        </member>
        <member name="T:Google.GData.Client.ChangeVersion">
            <summary>Helper to walk the tree and set the versioninformation</summary> 
        </member>
        <member name="M:Google.GData.Client.ChangeVersion.#ctor(Google.GData.Client.IVersionAware)">
            <summary>Constructor.</summary> 
            <param name="v">the versioninformation to pass </param>
        </member>
        <member name="M:Google.GData.Client.ChangeVersion.Go(Google.GData.Client.AtomBase)">
            <summary>Walker action. Just sets a property.</summary> 
            <param name="atom">object to set the property on </param>
            <returns> always false, indicating to walk the whole tree</returns>
        </member>
        <member name="T:Google.GData.Client.BaseIsPersistable">
            <summary>Helper class, mainly used to walk the tree for the dirty flag.</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseIsPersistable.Go(Google.GData.Client.AtomBase)">
            <summary>Walker action. Just gets a property.</summary> 
            <param name="atom">object to set the property on </param>
            <returns>returns the value of the ShouldBePersisted() of the object</returns>
        </member>
        <member name="T:Google.GData.Client.AtomBase">
            <summary>
            AtomBase object representation.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBase.uriBase">
            <summary>holds the base Uri</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBase.uriImpliedBase">
            <summary>implied base, get's pushed down</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBase.atomLanguageTag">
            <summary>holds the xml:lang element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBase.extensionsList">
            <summary>extension element collection</summary>
        </member>
        <member name="F:Google.GData.Client.AtomBase.extensionFactories">
            <summary> extension element factories </summary>
        </member>
        <member name="F:Google.GData.Client.AtomBase.fAllowRecalc">
            <summary>a boolean indicating that recalc is allowed to happen implicitly now</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBase.fIsDirty">
            <summary>holds a flag indicating if the thing should be send to the server</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBase.MarkElementDirty(System.Boolean)">
            <summary>sets the element and all subelemts dirty flag</summary> 
            <param name="fFlag">indicates the property value to set</param>
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.IsPersistable">
            <summary>
            checks if the element or one subelement are persistable
            </summary>
        </member>
        <member name="M:Google.GData.Client.AtomBase.IsDirty">
            <summary>returns if the element or one subelement is dirty</summary>
        </member>
        <member name="P:Google.GData.Client.AtomBase.Dirty">
            <summary>The dirty property - indicates if exactly this element is dirty</summary> 
            <returns>returns true or false</returns>
        </member>
        <member name="P:Google.GData.Client.AtomBase.ImpliedBase">
            <summary>property that holds the implied base URI</summary> 
            <returns> the implied base URI as an AtomUri</returns>
        </member>
        <member name="P:Google.GData.Client.AtomBase.XmlName">
            <summary>Returns the XML name as string used for the element when persisting.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBase.GetAbsoluteUri(System.String)">
            <summary>
            Read only accessor for AbsoluteUri. This is pushed down
            whenever a base changes.
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBase.BaseUriChanged(Google.GData.Client.AtomUri)">
            <summary>This starts the calculation, to push down the base
            URI changes.</summary> 
            <param name="uriValue">the baseuri calculated so far</param>
        </member>
        <member name="P:Google.GData.Client.AtomBase.Base">
            <summary>calculates or sets the base uri of an element</summary> 
            <returns>an AtomUri for the Base URI when get is called</returns>
        </member>
        <member name="P:Google.GData.Client.AtomBase.Language">
            <summary>returns and sets the xml:lang value</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.AddExtension(Google.GData.Client.IExtensionElementFactory)">
            <summary>
            adding an extension factory for extension elements
            </summary>
            <param name="factory">The factory</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.RemoveExtension(Google.GData.Client.IExtensionElementFactory)">
            <summary>
            removing an extension factory for extension elements
            </summary>
            <param name="factory">The factory</param>
        </member>
        <member name="P:Google.GData.Client.AtomBase.ExtensionFactories">
            <summary>
            read only accessor for the Extension Factories
            </summary>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WalkTree(Google.GData.Client.IBaseWalkerAction)">
            <summary>Calls the action on this object and all children.</summary> 
            <param name="action">an IBaseWalkerAction interface to call </param>
            <returns>true or false, pending outcome of the passed in action</returns>
        </member>
        <member name="P:Google.GData.Client.AtomBase.ExtensionElements">
            <summary>read only accessor for the ExtensionsElements Collections</summary> 
            <returns> an ExtensionList of ExtensionElements</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.FindExtension(System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.CreateExtension(System.String,System.String)">
            <summary>
            Creates an extension for a given name and namespace by walking the
            extension factories list and calling CreateInstance for the right one
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.FindExtensionFactory(System.String,System.String)">
            <summary>
            Finds the extension factory for a given name/namespace
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.FindExtensions(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on local name
            and namespace. If namespace is NULL, all where
            the localname matches is found. If there are extensionelements that do 
            not implement ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.FindExtensions(System.String,System.String,Google.GData.Client.ExtensionList)">
            <summary>
            Finds all ExtensionElement based on local name
            and namespace. If namespace is NULL, all where
            the localname matches is found. If there are extensionelements that do 
            not implement ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <param name="arr">the array to fill</param>
            <returns>none</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.FindExtensions``1(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on local name
            and amespace. If namespace is NULL, all where
            the localname matches is found. If there are extensionelements that do 
            not implement ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to findt</param>
            <returns>none</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.DeleteExtensions(System.String,System.String)">
            <summary>
            Deletes all Extensions from the Extension list that match
            a localName and a Namespace. 
            </summary>
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.ReplaceExtensions(Google.GData.Client.ExtensionList)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and replaced with the new ones.
            the input array can contain several different
            namespace/localname combinations
            if the passed list is NULL or empty, this will just result
            in additions
            </summary>
            <param name="newList">a list of xmlnodes or IExtensionElementFactory objects</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.ReplaceExtension(System.String,System.String,Google.GData.Client.IExtensionElementFactory)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.CreateAtomSubElement(System.Xml.XmlReader,Google.GData.Client.AtomFeedParser)">
            <summary>
            this is the subclassing method for AtomBase derived 
            classes to overload what childelements should be created
            needed to create CustomLink type objects, like WebContentLink etc
            </summary>
            <param name="reader">The XmlReader that tells us what we are working with</param>
            <param name="parser">the parser is primarily used for nametable comparisons</param>
            <returns>AtomBase</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SaveToXml(System.IO.Stream)">
            <summary>Saves the object as XML.</summary> 
            <param name="stream">stream to save to</param>
            <returns>how many bytes written</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SaveToXml(System.Xml.XmlWriter)">
            <summary>saves the object as XML</summary> 
            <param name="writer">the xmlwriter to save to</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>protected virtual int SaveXmlAttributes(XmlWriter writer)</summary> 
            <param name="writer">the XmlWriter to save to</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteElementStart(System.Xml.XmlWriter,System.String)">
            <summary>protected WriteElementStart(XmlWriter writer)</summary> 
            <param name="writer"> the xmlwriter to use</param>
            <param name="elementName"> the elementToPersist to use</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>empty base implementation</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteLocalDateTimeElement(System.Xml.XmlWriter,System.String,System.DateTime)">
            <summary>Writes out a LOCAL datetime in ISO 8601 format.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <param name="elementName"> the elementToPersist to use</param>
            <param name="dateTime"> the localDateTime to convert and persist</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>empty base implementation</summary> 
            <param name="writer">the xmlwriter to save to</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedString(System.Xml.XmlWriter,System.String)">
            <summary>helper method to encapsulate a string encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param> 
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedString(System.Xml.XmlWriter,Google.GData.Client.AtomUri)">
            <summary>helper method to encapsulate a string encoding, uses HTML encoding now</summary>
            <param name="writer">the xml writer to write to</param> 
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedAttributeString(System.Xml.XmlWriter,System.String,Google.GData.Client.AtomUri)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="attributeName">the attribute the write</param>
            <param name="content">the atomUri to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedAttributeString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="attributeName">the attribute the write</param>
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedElementString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="elementName">the attribute the write</param>
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedElementString(System.Xml.XmlWriter,System.String,Google.GData.Client.AtomUri)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="elementName">the attribute the write</param>
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.OnVersionInfoChanged">
            <summary>
            this potential overloaded method gets called when the version information
            of an object is changed. It handles setting the versioninformation on 
            all children and the factories. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SetVersionInfo(Google.GData.Client.IVersionAware)">
            <summary>
            this gets called out of a notification chain. It sets 
            this objects version info and the extension lists. We do not
            use the property accessor to avoid the notification loop
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.ShouldBePersisted">
            <summary>Method to check whether object should be saved.
            This doesn't check whether the object is dirty; it only
            checks whether the XML content is worth saving.
            </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomBase.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.AtomBase.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.AtomBaseLinkConverter">
            <summary>TypeConverter, so that AtomBaseLink shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBaseLinkConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomBaseLinkConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
             <summary>standard ConvertTo typeconverter code</summary> 
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomBaseLink">
            <summary>AtomBaselink is an intermediate object that adds the URI property
            used as the parent class for a lot of other objects (like atomlink, atomicon, etc)
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBaseLink.uriString">
            <summary>holds the string rep</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomBaseLink.Uri">
            <summary>accessor method public string Uri</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomBaseLink.AbsoluteUri">
            <summary>public Uri AbsoluteUri</summary>         
        </member>
        <member name="M:Google.GData.Client.AtomBaseLink.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomBaseLink.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="T:Google.GData.Client.AtomCategory">
            <summary>
            Category elements contain information about a category to which an Atom feed or entry is associated.
            atomCategory = element atom:category {
               atomCommonAttributes,
               attribute term { text },
               attribute scheme { atomUri }?,
               attribute label { text }?,
               empty
            }
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomCategory.term">
            <summary>holds the term</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomCategory.scheme">
            <summary>holds the scheme as an Uri</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomCategory.label">
            <summary>holds the category label</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategory.#ctor">
            <summary>empty Category constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategory.#ctor(System.String)">
            <summary>Category constructor</summary> 
            <param name="term">the term of the category</param>
        </member>
        <member name="M:Google.GData.Client.AtomCategory.#ctor(System.String,Google.GData.Client.AtomUri)">
            <summary>Category constructor</summary> 
            <param name="term">the term of the category</param>
            <param name="scheme">the scheme of the category</param>
        </member>
        <member name="M:Google.GData.Client.AtomCategory.#ctor(System.String,Google.GData.Client.AtomUri,System.String)">
            <summary>Category constructor</summary> 
            <param name="term">the term of the category</param>
            <param name="scheme">the scheme of the category</param>
            <param name="label"> the label for the category</param>
        </member>
        <member name="P:Google.GData.Client.AtomCategory.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategory.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomCategory.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:Google.GData.Client.AtomCategory.Term">
            <summary>accessor method public string Term</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomCategory.Label">
            <summary>accessor method public string Label</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomCategory.Scheme">
            <summary>accessor method public Uri Scheme</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomCategory.UriString">
            <summary>creates a string rep of a category useful for a query URI</summary> 
            <returns>the category as a string for a query </returns>
        </member>
        <member name="T:Google.GData.Client.AtomContentConverter">
            <summary>TypeConverter, so that AtomContentConverter shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomContentConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomContentConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomContent">
            <summary>atom:content object representation
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomContent.type">
            <summary>holds the type attribute</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomContent.src">
            <summary>holds the src URI attribute</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomContent.content">
            <summary>holds the content</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomContent.#ctor">
            <summary>default constructor. Sets the content type to text.</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomContent.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomContent.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="M:Google.GData.Client.AtomContent.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into</param>
        </member>
        <member name="M:Google.GData.Client.AtomContent.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element. Note that if the 
            content type is xhtml, no encoding will be done by this object</summary> 
            <param name="writer">the xmlWriter to save into</param>
        </member>
        <member name="P:Google.GData.Client.AtomContent.Type">
            <summary>accessor method public string Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomContent.Src">
            <summary>accessor method public Uri Src</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomContent.AbsoluteUri">
            <summary>public Uri AbsoluteUri</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomContent.Content">
            <summary>accessor method public string Content</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomContent.BatchErrors">
            <summary>
            gd:errors element
            </summary>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.AtomFeed">
            <summary>Base class to read gData feeds in Atom</summary>
            <remarks>
            <para>
            Version 1.0 changed to:
            <code>
            AtomFeed =
               element atom:feed {
                  atomCommonAttributes,
                  (atomAuthor*
                   atomCategory*
                   atomContributor*
                   atomGenerator?
                   atomIcon?
                   atomId
                   atomLink*
                   atomLogo?
                   atomRights?
                   atomSubtitle?
                   atomTitle
                   atomUpdated
                   extensionElement*),
                  atomEntry*
               }
            </code>
            In addition it holds:
            <list type="bullet">
                <item>
                    <term><c>opensearch:totalResults</c></term>
                    <description>Total number of search results available (not necessarily all present in the feed).</description>
                </item>
                <item>
                    <term><c>opensearch:startIndex</c></term>
                    <description>The 1-based index of the first result.</description>
                </item>
                <item>
                    <term><c>opensearch:itemsPerPage</c></term>
                    <description>The maximum number of items that appear on one page. This allows clients to generate direct links to any set of subsequent pages.</description>
                </item>
            </list>
            </para>
            <para>
            In addition to these OpenSearch tags, the response also includes the following Atom and gData tags:
            <list type="bullet">
                <item>
                    <term><c>atom:link rel="service.feed" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the URI where the complete Atom feed can be retrieved.</description>
                </item>
                <item>
                    <term><c>atom:link rel="service.feed" type="application/rss+xml" href="..."/></c></term>
                    <description>Specifies the URI where the complete RSS feed can be retrieved.</description>
                </item>
                <item>
                    <term><c>atom:link rel="service.post" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the Atom feed PostURI (where new entries can be posted).</description>
                </item>
                <item>
                    <term><c>atom:link rel="self" type="..." href="..."/></c></term>
                    <description>Contains the URI of this search request. The type attribute depends on the requested format. If no data changes, issuing a <c>GET</c> to this URI returns the same response.</description>
                </item>
                <item>
                    <term><c>atom:link rel="previous" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the URI of the previous chunk of this query resultset, if it is chunked.</description>
                </item>
                <item>
                    <term><c>atom:link rel="next" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the URI of the next chunk of this query resultset, if it is chunked.</description>
                </item>
                <item>
                    <term><c>gdata:processed parameter="..."/></c></term>
                    <description>One of these tags is inserted for each parameter understood and processed by the service, e.g. <c>gdata:processed parameter="author"</c>.</description>
                </item>
            </list>
            </para>
            </remarks> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.feedEntries">
            <summary>collection of feed entries</summary> 
        </member>
        <member name="E:Google.GData.Client.AtomFeed.NewAtomEntry">
            <summary>eventhandler, when the parser creates a new feed entry-> mirrored from underlying parser</summary> 
        </member>
        <member name="E:Google.GData.Client.AtomFeed.NewExtensionElement">
            <summary>eventhandler, when the parser finds a new extension element-> mirrored from underlying parser</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.totalResults">
            <summary>holds the total results</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.startIndex">
            <summary>holds the start-index parameter</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.itemsPerPage">
            <summary>holds number of items per page</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.service">
            <summary>holds the service interface to use</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomFeed.#ctor">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomFeed.#ctor(System.Uri,Google.GData.Client.IService)">
            <summary>default constructor</summary> 
            <param name="uriBase">the location the feed was loaded from</param>        
            <param name="service">the service used to create this feed</param>        
        </member>
        <member name="M:Google.GData.Client.AtomFeed.#ctor(Google.GData.Client.AtomFeed)">
            <summary>default constructor</summary> 
            <param name="originalFeed">if you want to create a copy feed, for batch use, e.g</param>        
        </member>
        <member name="M:Google.GData.Client.AtomFeed.IsFeedIdentical(Google.GData.Client.AtomFeed,Google.GData.Client.AtomFeed)">
            <summary>tries to determine if the two feeds derive from the same source</summary> 
            <param name="feedOne">the first feed</param>
            <param name="feedTwo">the second feed</param>
            <returns>true if believed to be the same source</returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Post">
            <summary>accessor method public string Post</summary> 
            <returns>the Uri as string to the Post Service</returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.BatchData">
            <summary>accessor to the batchdata for the entry</summary> 
            <returns> GDataBatch object </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Batch">
            <summary>Retrieves the batch link for the current feed.</summary> 
            <returns>The URI of the batch support for the feed. </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.CreateBatchFeed(Google.GData.Client.GDataBatchOperationType)">
            <summary>
            returns a new batchfeed with all the currently dirty entries in it
            </summary>
            <param name="defaultOperation">the default operation to execute</param>
            <returns>AtomFeed</returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.ReadOnly">
            <summary>returns whether or not the entry is read-only </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomFeed.NextChunk">
            <summary>accessor method public string NextChunk</summary> 
            <returns>the Uri as string to the next chunk of the result</returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.PrevChunk">
            <summary>accessor method public string PrevChunk</summary> 
            <returns>the Uri as a string to the previous chunk of the result</returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Feed">
            <summary>accessor method public string Feed</summary> 
            <returns>returns the Uri as string for the feed service </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Self">
            <summary>accessor method public string Self</summary> 
            <returns>returns the Uri as string for the feed with the Query Parameters </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Service">
            <summary>accessor method for the gData Service to use</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomFeed.TotalResults">
            <summary>accessor method public int TotalResults</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.StartIndex">
            <summary>accessor method public int StartIndex</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.ItemsPerPage">
            <summary>accessor method public int ItemsPerPage</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Entries">
            <summary>accessor method public ExtensionList Entries</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>checks to see if we are a batch feed, if so, adds the batchNS</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.XmlName">
            <summary>just returns the constant representing this xml element</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomFeed.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.Parse(System.IO.Stream,Google.GData.Client.AlternativeFormat)">
            <summary>given a stream, parses it to construct the Feed object out of it</summary> 
            <param name="stream"> a stream representing hopefully valid XML</param>
            <param name="format"> indicates if the stream is Atom or Rss</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.OnParsedNewEntry(System.Object,Google.GData.Client.FeedParserEventArgs)">
            <summary>Event chaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user; if the user doesn't discard it, we add the entry to our
            collection</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feed entry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.OnNewExtensionElement(System.Object,Google.GData.Client.ExtensionElementEventArgs)">
            <summary>Event chaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user; if the user doesn't discard it, we add the entry to our
            collection</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feed entry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.BaseUriChanged(Google.GData.Client.AtomUri)">
            <summary>just go down the child collections</summary> 
            <param name="uriBase"> as currently calculated</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.Insert``1(``0)">
            <summary>uses the set service to insert a new entry. </summary> 
            <param name="newEntry">the atomEntry to insert into the feed</param>
            <returns>the entry as echoed back from the server. The entry is NOT added
                     to the feeds collection</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.Publish">
            <summary>goes over all entries, and updates the ones that are dirty</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.WalkTree(Google.GData.Client.IBaseWalkerAction)">
            <summary>calls the action on this object and all children</summary> 
            <param name="action">an IAtomBaseAction interface to call </param>
            <returns>true or false, pending outcome</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.OnNewExtensionsElement(System.Object,Google.GData.Client.ExtensionElementEventArgs)">
            <summary>eventhandler - called for event extension element
            </summary>
            <param name="sender">the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedEntry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.HandleExtensionElements(Google.GData.Client.ExtensionElementEventArgs,Google.GData.Client.AtomFeedParser)">
            <summary>
            event on the Feed to handle extension elements during parsing
            </summary>
            <param name="e">the event arguments</param>
            <param name="parser">the parser that caused this</param>
        </member>
        <member name="T:Google.GData.Client.AtomEntryConverter">
            <summary>TypeConverter, so that AtomEntry shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomEntryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomEntry">
            <summary>AtomEntry object, representing an item in the RSS/Atom feed
             Version 1.0 removed atom-Head
               element atom:entry {
                  atomCommonAttributes,
                  (atomAuthor*
                    atomCategory*
                   atomContent?
                   atomContributor*
                   atomId
                   atomLink*
                   atomPublished?
                   atomRights?
                   atomSource?
                   atomSummary?
                   atomTitle
                   atomUpdated
                   extensionElement*)
               }
             </summary>
        </member>
        <member name="F:Google.GData.Client.AtomEntry.title">
            <summary>/feed/entry/title property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.id">
            <summary>/feed/entry/id property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.links">
            <summary>/feed/entry/link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.lastUpdateDate">
            <summary>/feed/entry/updated property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.publicationDate">
            <summary>/feed/entry/published property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.authors">
            <summary>/feed/entry/author property as Author object</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.contributors">
            <summary>/feed/entry/atomContributor property as Author object</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.rights">
            <summary>The "atom:rights" element is a Text construct that conveys a human-readable copyright statement for an entry or feed.</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.categories">
            <summary>/feed/entry/category/@term property as a list of AtomCategories</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.summary">
            <summary>The "atom:summary" element is a Text construct that conveys a short summary, abstract or excerpt of an entry.</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.content">
            <summary>contains the content as an object</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.source">
            <summary>atom:source element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.service">
            <summary>GData service to use</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.feed">
            <summary>holds the owning feed</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomEntry.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntry.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>checks to see if we are a batch feed, if so, adds the batchNS</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            declaration that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.#ctor">
            <summary>
            default AtomEntry constructor. Adds the AppControl element
            as a default extension
            </summary>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Feed">
            <summary>Read only accessor for feed</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntry.setFeed(Google.GData.Client.AtomFeed)">
            <summary>internal method to set the feed</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntry.ImportFromFeed(Google.GData.Client.AtomEntry)">
            <summary>helper method to create a new, decoupled entry based on a feedEntry</summary> 
            <param name="entryToImport">the entry from a feed that you want to put somewhere else</param>
            <returns> the new entry ready to be inserted</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Service">
            <summary>accessor method for the GData Service to use</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomEntry.BatchData">
            <summary>accessor to the batchdata for the entry</summary> 
            <returns>GDataBatch object</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.EditUri">
            <summary>accessor method public Uri EditUri</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.SelfUri">
            <summary>accessor for the self URI</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.MediaUri">
            <summary>accessor to find the edit-media link</summary> 
            <returns>the Uri as AtomUri to the media upload Service</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.AlternateUri">
            <summary>accessor to find the alternate link, in HTML only
            The method scans the link collection for a link that is of type rel=alternate
            and has a media type of HTML, otherwise it return NULL. The same is true for setting this. 
            If you need to use a rel/alternate with a different media type, you need
            to use the links collection directly</summary> 
            <returns>the Uri as AtomUri to HTML representation</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.FeedUri">
            <summary>accessor method public string Feed</summary> 
            <returns>returns the Uri as string for the feed service </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Updated">
            <summary>accessor method public DateTime UpdateDate</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Published">
            <summary>accessor method public DateTime PublicationDate</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.AppControl">
            <summary>
            returns the app:control element
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.IsDraft">
            <summary>specifies if app:control/app:draft is yes or no. 
            this is determined by walking the extension elements collection</summary> 
            <returns>true if this is a draft element</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Authors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Contributors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Content">
            <summary>accessor method public string Content</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Summary">
            <summary>accessor method public string Summary</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Links">
            <summary>accessor method public Links AtomLinkCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Categories">
            <summary>holds an array of AtomCategory objects</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Id">
            <summary>accessor method public AtomId Id</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Title">
            <summary>accessor method public AtomTextConstruct Title</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Source">
            <summary>if the entry was copied, represents the source</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Rights">
            <summary>accessor method public string rights</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.ReadOnly">
            <summary>returns whether or not the entry is read-only</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntry.Update">
            <summary>commits the item to the server</summary> 
            <returns>throws an exception if an error occured updating, returns 
            the updated entry from the service</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.Delete">
            <summary>deletes the item from the server</summary> 
            <returns>throws an exception if an error occured updating</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.CopyEntry(Google.GData.Client.AtomEntry)">
            <summary>takes the updated entry returned and sets the properties to this object</summary> 
            <param name="updatedEntry"> </param>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.CreateAtomSubElement(System.Xml.XmlReader,Google.GData.Client.AtomFeedParser)">
            <summary>
            this is the subclassing method for AtomBase derived 
            classes to overload what childelements should be created
            needed to create CustomLink type objects, like WebContentLink etc
            </summary>
            <param name="reader">The XmlReader that tells us what we are working with</param>
            <param name="parser">the parser is primarily used for nametable comparisons</param>
            <returns>AtomBase</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.BaseUriChanged(Google.GData.Client.AtomUri)">
            <summary>just go down the child collections</summary> 
            <param name="uriBase"> as currently calculated</param>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.WalkTree(Google.GData.Client.IBaseWalkerAction)">
            <summary>calls the action on this object and all children</summary> 
            <param name="action">an IAtomBaseAction interface to call </param>
            <returns>true or false, pending outcome</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.Parse(Google.GData.Client.ExtensionElementEventArgs,Google.GData.Client.AtomFeedParser)">
            <summary>
            Parses the inner state of the element
            </summary>
            <param name="e">The extension element that should be added to this entry</param>
            <param name="parser">The AtomFeedParser that called this</param>
        </member>
        <member name="T:Google.GData.Client.AtomGeneratorConverter">
            <summary>TypeConverter, so that AtomGenerator shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomGeneratorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomGeneratorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomGenerator">
            <summary>Represents the Generator element /feed/generator in Atom. In RSS, only the name property is used.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomGenerator.text">
            <summary>text part of the Generator element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomGenerator.uri">
            <summary>Uri attribute of the Generator element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomGenerator.version">
            <summary>version attribute of the Generator element</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.#ctor">
            <summary>standard constructor, not used right now
            atomGenerator = element atom:generator {
               atomCommonAttributes,
               attribute url { atomUri }?,
               attribute version { text }?,
               text
            }
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.#ctor(System.String)">
            <summary>public AtomGenerator(string text)</summary> 
            <param name="text">the human readable representation of the generator</param>
        </member>
        <member name="P:Google.GData.Client.AtomGenerator.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:Google.GData.Client.AtomGenerator.Text">
            <summary>accessor method public string Text</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomGenerator.Uri">
            <summary>accessor method public Uri Uri</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomGenerator.Version">
            <summary>accessor method public string Version</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.AtomFeedParser">
            <summary>AtomFeedParser.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeedParser.nameTable">
            <summary>holds the nametable used for parsing, based on XMLNameTable</summary>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.#ctor">
            <summary>standard empty constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.#ctor(Google.GData.Client.IVersionAware)">
            <summary>standard constructor</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomFeedParser.Nametable">
            <summary>
            nametable for the xmlparser that the atomfeedparser uses
            </summary>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.Parse(System.IO.Stream,Google.GData.Client.AtomFeed)">
            <summary>starts the parsing process</summary> 
            <param name="streamInput">input stream to parse </param>
            <param name="feed">the basefeed object that should be set</param> 
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseCategories(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>tries to parse a category collection document</summary> 
            <param name="reader"> xmlReader positioned at the start element</param>
            <param name="owner">the base object that the collection belongs to</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseFeed(System.Xml.XmlReader,Google.GData.Client.AtomFeed)">
            <summary>reads in the feed properties, updates the feed object, then starts
            working on the entries...</summary> 
            <param name="reader"> xmlReader positioned at the Feed element</param>
            <param name="feed">the basefeed object that should be set</param>
            <returns> notifies user using event mechanism</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseSource(System.Xml.XmlReader,Google.GData.Client.AtomSource)">
            <summary>parses xml to fill a precreated AtomSource object (might be a feed)</summary> 
            <param name="reader">correctly positioned reader</param>
            <param name="source">created source object to be filled</param>
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.IsCurrentNameSpace(System.Xml.XmlReader,System.String)">
            <summary>checks to see if the passed in namespace is the current one</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="namespaceToCompare">the namespace to test for</param> 
            <returns> true if this is the one</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBaseAttributes(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>Parses the base attributes and puts the rest in extensions.
            This needs to happen AFTER known attributes are parsed.</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="baseObject">the base object to set the property on</param>
            <returns> true if an unknown attribute was found</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseExtensionElements(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses extension elements, needs to happen when known attributes are done</summary>
            <param name="reader">correctly positioned xmlreader</param>
            <param name="baseObject">the base object to set the property on</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBasicAttributes(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>nifty loop to check for base attributes for an object</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="baseObject">the base object to set the property on</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBaseLink(System.Xml.XmlReader,Google.GData.Client.AtomBaseLink)">
            <summary>parses a baselink object, like AtomId, AtomLogo, or AtomIcon</summary> 
            <param name="reader"> correctly positioned xmlreader</param>
            <param name="baseLink">the base object to set the property on</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParsePerson(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses an author/person object</summary> 
            <param name="reader"> an XmlReader positioned at the start of the author</param>
            <param name="owner">the object containing the person</param>
            <returns> the created author object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseCategory(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses an xml stream to create an AtomCategory object</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="owner">the object containing the person</param>
            <returns> the created AtomCategory object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseLink(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>creates an atomlink object</summary>
            <param name="reader">correctly positioned xmlreader</param>
            <param name="owner">the object containing the person</param>
            <returns> the created AtomLink object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseEntry(System.Xml.XmlReader)">
            <summary>reads one of the feed entries at a time</summary> 
            <param name="reader"> XmlReader positioned at the entry element</param>
            <returns> notifies user using event mechanism</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBatch(System.Xml.XmlReader,Google.GData.Client.AtomEntry)">
            <summary>
            parses the current position in the xml reader and fills 
            the provided GDataEntryBatch property on the entry object 
            </summary>
            <param name="reader">the xmlreader positioned at a batch element</param>
            <param name="entry">the atomentry object to fill in</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseOperationType(System.Xml.XmlReader)">
            <summary>
            reads the current positioned reader and creates a operationtype enum
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <returns>GDataBatchOperationType</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBatch(System.Xml.XmlReader,Google.GData.Client.AtomFeed)">
            <summary>
            parses the current position in the xml reader and fills 
            the provided GDataFeedBatch property on the feed object
            </summary>
            <param name="reader">the xmlreader positioned at a batch element</param>
            <param name="feed">the atomfeed object to fill in</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseTextConstruct(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses an AtomTextConstruct</summary> 
            <param name="reader">the xmlreader correctly positioned at the construct </param>
            <param name="owner">the container element</param>
            <returns>the new text construct </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseGenerator(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses an AtomGenerator</summary> 
            <param name="reader">the xmlreader correctly positioned at the generator </param>
            <param name="owner">the container element</param>
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseContent(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>creates an AtomContent object by parsing an xml stream</summary> 
            <param name="reader">a XMLReader positioned correctly </param>
            <param name="owner">the container element</param>
            <returns> null or an AtomContent object</returns>
        </member>
        <member name="T:Google.GData.Client.AtomIcon">
            <summary>atomIcon object representation. 
                The "atom:icon" element's content is an IRI reference [RFC3987] which identifies an image which provides 
                iconic visual identification for a feed.
                The image SHOULD have an aspect ratio of one (horizontal) to one (vertical), and SHOULD be suitable 
                for presentation at a small size.
            </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomIcon.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomId">
            <summary>The "atom:id" element conveys a permanent, universally unique identifier for an entry or feed.
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomId.#ctor">
            <summary>empty constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomId.#ctor(System.String)">
            <summary>public AtomId(string uri)</summary> 
            <param name="link">the URI for the ID</param>
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomId.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomId.GetHashCode">
            <summary>
            as we do comparisons, we need to override this
            we return the hashcode of our string member
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:Google.GData.Client.AtomId.CompareTo(System.Object)">
            <summary>
            overloaded IComparable interface method
            </summary>
            <param name="obj">the object to compare this instance with</param>
            <returns>int</returns>
        </member>
        <member name="M:Google.GData.Client.AtomId.Equals(System.Object)">
            <summary>
            overridden equal method
            </summary>
            <param name="obj"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomId.op_Equality(Google.GData.Client.AtomId,Google.GData.Client.AtomId)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomId.op_Inequality(Google.GData.Client.AtomId,Google.GData.Client.AtomId)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="T:Google.GData.Client.AtomLink">
            <summary>AtomLink represents an atom:link element
            atomLink = element atom:link {
               atomCommonAttributes,
               attribute href { atomUri },
               attribute rel { atomNCName | atomUri }?,
               attribute type { atomMediaType }?,
               attribute hreflang { atomLanguageTag }?,
               attribute title { text }?,
               attribute length { text }?,
               empty
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.href">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.rel">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.type">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.hreflang">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.title">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.length">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.HTML_TYPE">
            <summary>HTML Link Type</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.ATOM_TYPE">
            <summary>ATOM Link Type</summary>
        </member>
        <member name="M:Google.GData.Client.AtomLink.#ctor">
            <summary>default empty constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLink.#ctor(System.String)">
            <summary>public AtomLink(string uri)</summary> 
            <param name="link">the uri for the link </param>
        </member>
        <member name="M:Google.GData.Client.AtomLink.#ctor(System.String,System.String)">
            <summary>
            constructor used in atomfeed to create new links
            </summary>
            <param name="type">the type of link to create</param>
            <param name="rel">the rel value</param>
        </member>
        <member name="P:Google.GData.Client.AtomLink.HRef">
            <summary>accessor method public Uri HRef</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.AbsoluteUri">
            <summary>public string AbsoluteUri</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomLink.Rel">
            <summary>accessor method public string Rel</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.Type">
            <summary>accessor method public string Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.HRefLang">
            <summary>accessor method public string HrefLang</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.Length">
            <summary>accessor method public int Lenght</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.Title">
            <summary>accessor method public string Title</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLink.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomLink.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="T:Google.GData.Client.AtomLogo">
            <summary>atomLogo object representation. 
                    The "atom:logo" element's content is an IRI reference [RFC3987] which '+
                    identifies an image which provides visual identification for a feed.
                    The image SHOULD have an aspect ratio of 2 (horizontal) to 1 (vertical).
                    implemented currently by reusing atomBaseLink. 
            </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomLogo.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomParserNameTable">
            <summary>AtomParserNameTable. An initialized nametable for faster XML processing
            parses:  4  Element Definitions
                    4.1  The "atom:feed" Element
                    4.1.1  The "version" Attribute
                    4.2  The "atom:head" Element
                    4.2.1  Usage of "atom:head" within "atom:entry"
                    4.3  The "atom:entry" Element
                    4.4  The "atom:title" Element
                    4.5  The "atom:id" Element
                    4.6  The "atom:link" Element
                    4.6.1  The "href" Attribute
                    4.6.2  The "rel" Attribute
                    4.6.3  The "type" Attribute
                    4.6.4  The "hreflang" Attribute
                    4.6.5  The "title" Attribute
                    4.6.6  The "length" Attribute
                    4.7  The "atom:updated" Element
                    4.8  The "atom:published" Element
                    4.9  The "atom:author" Element
                    4.10  The "atom:contributor" Element
                    4.12  The "atom:copyright" Element
                    4.13  The "atom:category" Element
                    4.13.1  The "term" Attribute
                    4.13.2  The "scheme" Attribute
                    4.13.3  The "label" attribute
                    4.14  The "atom:summary" Element
                    4.15  The "atom:content" Element
                    4.15.1  The "type" attribute
                    4.15.2  The "src" attribute
                    4.15.3  Processing Model
                    4.16  The "atom:introspection" Element
                    4.17  The "atom:post" Element
                    4.18  The "atom:edit" Element
                    4.20  The "atom:generator" Element
                    the atom:icon element
                    the atom:logo element
             </summary>
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.feed">
            <summary>atom:feed</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.version">
            <summary>atom:version</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.title">
            <summary>atom:title</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.id">
            <summary>atom:id</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.link">
            <summary>atom:link</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.href">
            <summary>link attributes: href, rel, type, hreflang, title (use the defined string), length</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.rel">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.hreflang">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.length">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.updated">
            <summary>atom:updated</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.published">
            <summary>atom:published</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.author">
            <summary>atom:author</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.contributor">
            <summary>atom:contributor</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.rights">
            <summary>atom:rights</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.category">
            <summary>atom:category</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.term">
            <summary>attributes term, scheme, label</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.scheme">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.label">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.summary">
            <summary>atom:summary</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.content">
            <summary>atom:content</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.src">
            <summary>attributes type (use the defined string), src</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.subTitle">
            <summary>atom:subtitle</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.generator">
            <summary>atom:generator</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.source">
            <summary>atom:source</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.entry">
            <summary>atom:entry</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.uri">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.email">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.icon">
            <summary>holds the icon </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.logo">
            <summary>holds the logo</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlCategoryElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlContentElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAtomEntryElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlGeneratorElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlIconElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlLogoElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlIdElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlLinkElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlFeedElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAuthorElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlContributorElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlSourceElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlRightsElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlSubtitleElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlTitleElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlSummaryElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlUpdatedElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlEmailElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlUriElement">
            <summary>static string for parsing - same for attribute</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlPublishedElement">
            <summary>static string for parsing - same for attribute</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeTerm">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeScheme">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeLabel">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeVersion">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeLength">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeRel">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeHRefLang">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeHRef">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeSrc">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlCategoriesElement">
            <summary>static string for parsing the App:categories element</summary>    
        </member>
        <member name="M:Google.GData.Client.AtomParserNameTable.InitAtomParserNameTable">
            <summary>initializes the name table for use with atom parsing. This is the
            only place where strings are defined for parsing</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Feed">
            <summary>Read only accessor for feed</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Categories">
            <summary>Read only accessor for Categories</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Version">
            <summary>Read only accessor for version</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Source">
            <summary>Read only accessor for source</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Entry">
            <summary>Read only accessor for entry</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Title">
            <summary>Read only accessor for title</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Link">
            <summary>Read only accessor for link</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Id">
            <summary>Read only accessor for id</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.HRef">
            <summary>Read only accessor for href</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Rel">
            <summary>Read only accessor for rel</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.HRefLang">
            <summary>Read only accessor for hreflang</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Length">
            <summary>Read only accessor for length</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Category">
            <summary>Read only accessor for category</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Updated">
            <summary>Read only accessor for updated</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Published">
            <summary>Read only accessor for published</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Author">
            <summary>Read only accessor for author</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Contributor">
            <summary>Read only accessor for contributor</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Rights">
            <summary>Read only accessor for rights</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Term">
            <summary>Read only accessor for term</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Scheme">
            <summary>Read only accessor for scheme</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Label">
            <summary>Read only accessor for label</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Summary">
            <summary>Read only accessor for summary</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Content">
            <summary>Read only accessor for content</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Src">
            <summary>Read only accessor for src</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Subtitle">
            <summary>Read only accessor for subtitle</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Uri">
            <summary>Read only accessor for uri</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Generator">
            <summary>Read only accessor for generator</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Email">
            <summary>Read only accessor for email</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Icon">
            <summary>Read only accessor for icon</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Logo">
            <summary>Read only accessor for logo</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomPersonConverter">
            <summary>TypeConverter, so that AtomHead shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPersonConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomPersonConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomPersonType">
            <summary>enum to describe the different person types
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPersonType.Author">
            <summary>is an author</summary>
        </member>
        <member name="F:Google.GData.Client.AtomPersonType.Contributor">
            <summary>is an contributor</summary>
        </member>
        <member name="F:Google.GData.Client.AtomPersonType.Unknown">
            
            <summary>parsing error</summary>
        </member>
        <member name="T:Google.GData.Client.AtomPerson">
            <summary>generic Person object, used for the feed and for the entry
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPerson.name">
            <summary>name holds the Name property as a string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPerson.email">
            <summary>email holds the email property as a string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPerson.uri">
            <summary>link holds an Uri, representing the link atribute</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPerson.type">
            <summary>holds  the type for persistence</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPerson.#ctor">
            <summary>public default constructor, usefull only for property pages</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPerson.#ctor(Google.GData.Client.AtomPersonType)">
            <summary>Constructor taking a type to indicate whether person is author or contributor.</summary> 
            <param name="type">indicates if author or contributor</param>
        </member>
        <member name="M:Google.GData.Client.AtomPerson.#ctor(Google.GData.Client.AtomPersonType,System.String)">
            <summary>Constructor taking a type to indicate whether person is author or contributor, plus the person's name</summary> 
            <param name="type">indicates if author or contributor</param>
            <param name="name">person's name</param>
        </member>
        <member name="P:Google.GData.Client.AtomPerson.Name">
            <summary>accessor method public string Name</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomPerson.Uri">
            <summary>accessor method public Uri Uri</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomPerson.Email">
            <summary>accessor method public Uri Email</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomPerson.XmlName">
            <summary>Just returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPerson.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomPerson.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="T:Google.GData.Client.AtomSourceConverter">
            <summary>TypeConverter, so that AtomHead shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomSourceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomSourceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomSource">
            <summary>Represents the AtomSource object. If an atom:entry is copied from one feed 
            into another feed, then the source atom:feed's metadata (all child elements of atom:feed other
            than the atom:entry elements) MAY be preserved within the copied entry by adding an atom:source 
            child element, if it is not already present in the entry, and including some or all of the source
            feed's Metadata elements as the atom:source element's children. Such metadata SHOULD be preserved 
            if the source atom:feed contains any of the child elements atom:author, atom:contributor, 
            atom:rights, or atom:category and those child elements are not present in the source atom:entry.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.authors">
            <summary>author collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.contributors">
            <summary>contributors collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.categories">
            <summary>category collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.generator">
            <summary>the generator</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.icon">
            <summary>icon, essentially an atom link</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.id">
            <summary>ID</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.links">
            <summary>link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.logo">
            <summary>logo, essentially an image link</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.rights">
            <summary>rights, former copyrights</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.subTitle">
            <summary>subtitle as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.title">
            <summary>title property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.updated">
            <summary>updated time stamp</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomSource.#ctor">
            <summary>public void AtomSource()</summary>
        </member>
        <member name="M:Google.GData.Client.AtomSource.#ctor(Google.GData.Client.AtomFeed)">
            <summary>public AtomSource(AtomFeed feed)</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomSource.Authors">
            <summary>accessor method public Authors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Contributors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Links">
            <summary>accessor method public Links AtomLinkCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Categories">
            <summary>returns the category collection</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomSource.Generator">
            <summary>accessor method public FeedGenerator Generator</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Icon">
            <summary>accessor method public AtomIcon Icon</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Logo">
            <summary>accessor method public AtomLogo Logo</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Updated">
            <summary>accessor method public DateTime LastUpdated</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Title">
            <summary>accessor method public string Title</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Subtitle">
            <summary>accessor method public string Subtitle</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Id">
            <summary>accessor method public string Id</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Rights">
            <summary>accessor method public string Rights</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomSource.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomSource.BaseUriChanged(Google.GData.Client.AtomUri)">
            <summary>just go down the child collections</summary> 
            <param name="uriBase"> as currently calculated</param>
        </member>
        <member name="M:Google.GData.Client.AtomSource.WalkTree(Google.GData.Client.IBaseWalkerAction)">
            <summary>calls the action on this object and all children</summary> 
            <param name="action">an IAtomBaseAction interface to call </param>
            <returns>true or false, pending outcome</returns>
        </member>
        <member name="T:Google.GData.Client.AtomTextConstructElementType">
            <summary>enum to define the AtomTextConstructs Type...</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructElementType.Rights">
            <summary>this is a Right element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructElementType.Title">
            <summary>this is a title element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructElementType.Subtitle">
            <summary>this is a subtitle element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructElementType.Summary">
            <summary>this is a summary element</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomTextConstructType">
            <summary>enum to define the AtomTextConstructs Type...</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructType.text">
            <summary>defines standard text</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructType.html">
            <summary>defines html text</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructType.xhtml">
            <summary>defines xhtml text</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomTextConstructConverter">
            <summary>TypeConverter, so that AtomTextConstruct shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomTextConstructConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomTextConstructConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomTextConstruct">
            <summary>AtomTextConstruct object representation
            A Text construct contains human-readable text, usually in small quantities. 
            The content of Text constructs is Language-Sensitive.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstruct.type">
            <summary>holds the type of the text</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstruct.text">
            <summary>holds the text as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstruct.elementType">
            <summary>holds the element type</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.#ctor">
            <summary>the public constructor only exists for the pleasure of property pages</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.#ctor(Google.GData.Client.AtomTextConstructElementType)">
            <summary>constructor indicating the elementtype</summary> 
            <param name="elementType">holds the xml elementype</param>
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.#ctor(Google.GData.Client.AtomTextConstructElementType,System.String)">
            <summary>constructor indicating the elementtype</summary> 
            <param name="elementType">holds the xml elementype</param>
            <param name="text">holds the text string</param>
        </member>
        <member name="P:Google.GData.Client.AtomTextConstruct.Type">
            <summary>accessor method public AtomTextConstructType Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomTextConstruct.Text">
            <summary>accessor method public string Text</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomTextConstruct.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="T:Google.GData.Client.AtomUri">
            <summary>AtomUri object representation
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomUri.#ctor(System.Uri)">
            <summary>basic constructor for the atomUri</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomUri.#ctor(System.String)">
            <summary>alternating constructor with a string</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomUri.Content">
            <summary>accessor method public string Content</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.ToString">
            <summary>override for ToString</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomUri.Compare(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>comparison method similar to strings</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomUri.GetHashCode">
            <summary>
            as we do comparisons, we need to override this
            we return the hashcode of our string member
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.CompareTo(System.Object)">
            <summary>
            overloaded IComparable interface method
            </summary>
            <param name="obj">the object to compare this instance with</param>
            <returns>int</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.Equals(System.Object)">
            <summary>
            overridden equal method
            </summary>
            <param name="obj"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_Equality(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_Inequality(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_GreaterThan(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_LessThan(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_GreaterThanOrEqual(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_LessThanOrEqual(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_Implicit(System.String)~Google.GData.Client.AtomUri">
            <summary>
            implicit new instance of AtomUri from string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_Implicit(System.Uri)~Google.GData.Client.AtomUri">
            <summary>
            implicit new instance of AtomUri from Uri object
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.AuthenticationException">
            <summary>standard exception class to be used when authentication 
            using Google Client Login fails
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AuthenticationException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.AuthenticationException.#ctor(System.String)">
            <summary>
            base constructor, takes a message text
            </summary> 
            <param name="msg"></param>
        </member>
        <member name="M:Google.GData.Client.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:Google.GData.Client.InvalidCredentialsException">
            <summary>thrown when the credentials are wrong</summary> 
        </member>
        <member name="M:Google.GData.Client.InvalidCredentialsException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.InvalidCredentialsException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:Google.GData.Client.InvalidCredentialsException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:Google.GData.Client.AccountDeletedException">
            <summary>thrown when the account was deleted
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDeletedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDeletedException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDeletedException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:Google.GData.Client.AccountDisabledException">
            <summary>thrown when the account was disabled
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDisabledException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDisabledException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDisabledException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:Google.GData.Client.NotVerifiedException">
            <summary>the account hoder was not verified
            </summary> 
        </member>
        <member name="M:Google.GData.Client.NotVerifiedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.NotVerifiedException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:Google.GData.Client.NotVerifiedException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:Google.GData.Client.TermsNotAgreedException">
            <summary>The Terms were not agreed with..
            </summary> 
        </member>
        <member name="M:Google.GData.Client.TermsNotAgreedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.TermsNotAgreedException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:Google.GData.Client.TermsNotAgreedException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:Google.GData.Client.ServiceUnavailableException">
            <summary>The service is current not available
            </summary> 
        </member>
        <member name="M:Google.GData.Client.ServiceUnavailableException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.ServiceUnavailableException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:Google.GData.Client.ServiceUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:Google.GData.Client.CaptchaRequiredException">
            <summary>many unsuccessfull logins might create this...
            </summary> 
        </member>
        <member name="M:Google.GData.Client.CaptchaRequiredException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.CaptchaRequiredException.#ctor(System.String,System.String,System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:Google.GData.Client.CaptchaRequiredException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="P:Google.GData.Client.CaptchaRequiredException.Url">
            <summary>Read only accessor for captchaUrl</summary> 
        </member>
        <member name="P:Google.GData.Client.CaptchaRequiredException.Token">
            <summary>Read only accessor for captchaToken</summary> 
        </member>
        <member name="T:Google.GData.Client.AuthSubUtil">
            <summary>helper class for communications between a 3rd party site and Google using the AuthSub protocol
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="hostedDomain">the name of the hosted domain, 
            like www.myexample.com</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="authenticationDomain">the domain at which the authentication server 
            exists</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="authenticationDomain">the domain at which the authentication server 
            exists</param>
            <param name="handler">the location of the authentication handler
             (defaults to "/accounts/AuthSubRequest".</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="hostedDomain">the name of the hosted domain, 
            like www.myexample.com</param>
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="authenticationDomain">the domain at which the authentication server 
            exists</param>
            <param name="handler">the location of the authentication handler
             (defaults to "/accounts/AuthSubRequest".</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.addParameter(System.Text.StringBuilder,System.String,System.String)">
            <summary> 
            Adds the query parameter with the given name and value to the URL.
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getSessionTokenUrl">
            <summary>
            Returns the URL to use to exchange the one-time-use token for
             a session token.
            </summary> 
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getSessionTokenUrl(System.String,System.String)">
            <summary>
            Returns the URL to use to exchange the one-time-use token for
             a session token.
            </summary> 
            <param name="protocol">the protocol to use to communicate with
            the server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRevokeTokenUrl">
            <summary>
            Returns the URL that handles token revocation, using the default
            domain and the default protocol
            </summary> 
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRevokeTokenUrl(System.String,System.String)">
            <summary>
            Returns the URL that handles token revocation.
            </summary> 
            <param name="protocol">the protocol to use to communicate with
            the server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getTokenFromReply(System.Uri)">
            <summary>
             Parses and returns the AuthSub token returned by Google on a successful
             AuthSub login request.  The token will be appended as a query parameter
            to the continue URL specified while making the AuthSub request.
            </summary> 
            <param name="uri">The reply URI to parse </param>
            <returns>the token value of the URI, or null if none </returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.exchangeForSessionToken(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Exchanges the one time use token returned in the URL for a session
            token. If the key is non-null, the token will be used securely, 
            and the request will be signed
            </summary> 
            <param name="onetimeUseToken">the token send by google in the URL</param>
            <param name="key">the private key used to sign</param>
            <returns>the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.exchangeForSessionToken(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Exchanges the one time use token returned in the URL for a session
            token. If the key is non-null, the token will be used securely, 
            and the request will be signed
            </summary> 
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <param name="onetimeUseToken">the token send by google in the URL</param>
            <param name="key">the private key used to sign</param>
            <returns>the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.revokeToken(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
             Revokes the specified token. If the <code>key</code> is non-null, 
            the token will be used securely and the request to revoke the 
            token will be signed.
            </summary>
            <param name="token">the AuthSub token to revoke</param>
            <param name="key">the private key to sign the request</param>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.revokeToken(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
             Revokes the specified token. If the <code>key</code> is non-null, 
            the token will be used securely and the request to revoke the 
            token will be signed.
            </summary>
            <param name="protocol"></param>
            <param name="domain"></param>
            <param name="token">the AuthSub token to revoke</param>
            <param name="key">the private key to sign the request</param>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.formAuthorizationHeader(System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.Uri,System.String)">
            <summary>Forms the AuthSub authorization header.
            if key is null, the token will be in insecure mode, otherwise 
            the token will be used securely and the header contains
            a signature
            </summary> 
            <param name="token">the AuthSub token to use </param>
            <param name="key">the private key to used </param>
            <param name="requestUri">the request uri to use </param>
            <param name="requestMethod">the HTTP method to use </param>
            <returns>the authorization header </returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.GetTokenInfo(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>Retrieves information about the AuthSub token. 
            If the <code>key</code> is non-null, the token will be used securely
            and the request to revoke the token will be signed.
            </summary> 
            <param name="token">tthe AuthSub token for which to receive information </param>
            <param name="key">the private key to sign the request</param>
            <returns>the token information in the form of a Dictionary from the name of the
             attribute to the value of the attribute</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.GetTokenInfo(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>Retrieves information about the AuthSub token. 
            If the <code>key</code> is non-null, the token will be used securely
            and the request to revoke the token will be signed.
            </summary> 
            <param name="protocol">the protocol to use to communicate with the server</param>
            <param name="domain">the domain at which the authentication server exists</param>
            <param name="token">tthe AuthSub token for which to receive information </param>
            <param name="key">the private key to sign the request</param>
            <returns>the token information in the form of a Dictionary from the name of the
             attribute to the value of the attribute</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.generateULONGRnd">
            <summary>creates a max 20 character long string of random numbers</summary>
            <returns> the string containing random numbers</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.sign(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>signs the data with the given key</summary>
            <param name="dataToSign">the data to sign </param>
            <param name="key">the private key to used </param>
            <returns> the signed data</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.GetTokenInfoUrl(System.String,System.String)">
            <summary>Returns the URL that handles token information call.</summary>
            <param name="protocol">the protocol to use to communicate with the server</param>
            <param name="domain">the domain at which the authentication server exists</param>
            <returns> the URL that handles token information call.</returns>
        </member>
        <member name="T:Google.GData.Client.AsyncOperationCompletedEventHandler">
            <summary>Delegate declaration for the operation completed event in a service</summary> 
        </member>
        <member name="T:Google.GData.Client.AsyncOperationProgressEventHandler">
            <summary>Delegate declaration for the operation progress update event in a service</summary> 
        </member>
        <member name="T:Google.GData.Client.AsyncOperationCompletedEventArgs">
            <summary>
            EventArgument class for async events, this one is used
            when the operation is completed.
            </summary>
        </member>
        <member name="M:Google.GData.Client.AsyncOperationCompletedEventArgs.#ctor(Google.GData.Client.AsyncData)">
            <summary>
            constructor. takes the async data blob
            </summary>
            <param name="data">async data to constructor</param>
        </member>
        <member name="P:Google.GData.Client.AsyncOperationCompletedEventArgs.Feed">
            <summary>the feed that was created. If NULL, a stream or entry was returned</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AsyncOperationCompletedEventArgs.Entry">
            <summary>the entry that was created. If NULL, a stream or feed was returned</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AsyncOperationCompletedEventArgs.ResponseStream">
            <summary>the stream that was created. If NULL, a feed or entry was returned</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.AsyncOperationProgressEventArgs">
            <summary>
            EventArgument class for async operation progress reports
            </summary>
        </member>
        <member name="M:Google.GData.Client.AsyncOperationProgressEventArgs.#ctor(System.Int64,System.Int64,System.Int32,System.Uri,System.String,System.Object)">
            <summary>
            constructor. Takes the URI and the service this event applies to
            </summary>
            <param name="completeSize">the completesize of the request</param>
            <param name="currentPosition">the current position in the upload/download</param>
            <param name="percentage">progress percentage</param>
            <param name="userData">The userdata identifying the request</param>
        </member>
        <member name="P:Google.GData.Client.AsyncOperationProgressEventArgs.CompleteSize">
            <summary>the complete upload size</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AsyncOperationProgressEventArgs.Position">
            <summary>the current position in the upload process</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AsyncOperationProgressEventArgs.Uri">
            <summary>the Uri that was used</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AsyncOperationProgressEventArgs.HttpVerb">
            <summary>
            returns the http verb that is executed
            </summary>
        </member>
        <member name="P:Google.GData.Client.AsyncData.UriToUse">
            <summary>
            the uri to use
            </summary>
        </member>
        <member name="P:Google.GData.Client.AsyncData.ParseFeed">
            <summary>
            indicates if the async operation should try to 
            parse the server returned stream, or just return the stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.AsyncQueryData">
            <summary>
            internal class for the data to pass to the async worker thread
            </summary>
        </member>
        <member name="P:Google.GData.Client.AsyncQueryData.Modified">
            <summary>
             the date for the ifModified timestamp
            </summary>
        </member>
        <member name="E:Google.GData.Client.AsyncDataHandler.AsyncOperationCompleted">
            <summary>eventhandler, fired when an async operation is completed</summary> 
        </member>
        <member name="E:Google.GData.Client.AsyncDataHandler.AsyncOperationProgress">
            <summary>eventhandler, fired when an async operation reports progress</summary> 
        </member>
        <member name="M:Google.GData.Client.AsyncDataHandler.CancelAsync(System.Object)">
            <summary>
            this method cancels the corresponding async operation. 
            It sends still a completed event, but that event will then
            have the cancel property set to true
            </summary>
            <param name="userData">your identifier for the operation to be cancelled</param>
        </member>
        <member name="M:Google.GData.Client.AsyncDataHandler.HandleResponseStream(Google.GData.Client.AsyncData,System.IO.Stream,System.Int64)">
            <summary>
            handles the response stream
            copies it into the memory stream, or parses it into a feed.
            </summary>
            <param name="data"></param>
            <param name="responseStream"></param>
            <param name="contentLength"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.AsyncDataHandler.HandleResponseStream(Google.GData.Client.AsyncData,System.IO.Stream,System.Int64,Google.GData.Client.IService)">
            <summary>
            handles the response stream
            copies it into the memory stream, or parses it into a feed.
            </summary>
            <param name="data"></param>
            <param name="responseStream"></param>
            <param name="contentLength"></param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.FeedParserEventArgs">
            <summary>Parsing event class...
            </summary> 
        </member>
        <member name="M:Google.GData.Client.FeedParserEventArgs.#ctor">
            <summary>constructor for the feedParser events - this one is only used
            to ask for a new entry</summary> 
        </member>
        <member name="M:Google.GData.Client.FeedParserEventArgs.#ctor(Google.GData.Client.AtomFeed,Google.GData.Client.AtomEntry)">
            <summary>constructor for the feedParser events</summary> 
            <param name="feed">the feed to use </param>
            <param name="entry">the feedentry to use </param> 
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.DiscardEntry">
            <summary>the eventhandler can set this to discard the entry</summary>
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.DoneParsing">
            <summary>Read only accessor for done</summary> 
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.CreatingEntry">
            <summary>Read only accessor for creating an entry</summary> 
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.Entry">
            <summary>the newly created entry obect</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.Feed">
            <summary>accessor method public Feed Feed</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.ExtensionElementEventArgs">
            <summary>extension element event class
            </summary> 
        </member>
        <member name="P:Google.GData.Client.ExtensionElementEventArgs.DiscardEntry">
            <summary>the eventhandler can set this to discard the entry</summary> 
        </member>
        <member name="P:Google.GData.Client.ExtensionElementEventArgs.ExtensionElement">
            <summary>accessor method public XmlNode ExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.ExtensionElementEventArgs.Base">
            <summary>accessor method public AtomBase Base</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.FeedParserEventHandler">
            <summary>Delegate declaration for the parsing eventhandler</summary> 
        </member>
        <member name="T:Google.GData.Client.ExtensionElementEventHandler">
            <summary>Delegate declaration for the extension eventhandler</summary> 
        </member>
        <member name="T:Google.GData.Client.BaseFeedParser">
            <summary>AtomEntry object, representing an item in the RSS feed
            </summary> 
        </member>
        <member name="E:Google.GData.Client.BaseFeedParser.NewAtomEntry">
            <summary>eventhandler, when the parser created a new feed entry</summary> 
        </member>
        <member name="E:Google.GData.Client.BaseFeedParser.NewExtensionElement">
            <summary>eventhandler, when the parser finds an extension element</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseFeedParser.doc">
            <summary>the XmlDoc that we use to hand nodes to, in case of extensions</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseFeedParser.Document">
            <summary>Read only accessor for doc</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.Parse(System.IO.Stream,Google.GData.Client.AtomFeed)">
            <summary>virtual, starts the parsing process</summary> 
            <param name="streamInput">input stream to parse </param>
            <param name="feed">the basefeed object that should be set</param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnCreateNewEntry">
            <summary>overloaded to make it easier to fire the event</summary>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewAtomEntry(Google.GData.Client.AtomEntry)">
            <summary>overloaded to make it easier to fire the event</summary> 
            <param name="newEntry">the new AtomEntry to fire </param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnParsingDone">
            <summary>protected void OnParsingDone()</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewAtomEntry(Google.GData.Client.AtomFeed)">
            <summary>overloaded to make eventfiring easier</summary> 
            <param name="feed"> the new feed to fire</param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewExtensionElement(System.Xml.XmlNode,Google.GData.Client.AtomBase)">
            <summary>eventfiring helper for new extensions</summary> 
            <param name="node"> the new node that was found</param>
            <param name="baseObject"> the object this node should be added to</param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewExtensionElement(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>eventfiring helper for new extensions</summary> 
            <param name="reader"> the reader positioned on the extension</param>
            <param name="baseObject"> the object this node should be added to</param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewAtomEntry(Google.GData.Client.FeedParserEventArgs)">
            <summary>protected virtual OnNewAtomEntry( FeedParserEventArgs args)</summary> 
            <param name="args"> FeedParserEventArgs, includes the new entry</param>
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.NextElement(System.Xml.XmlReader)">
            <summary>moves to the next element</summary>
            <param name="reader">the xmlreader to skip </param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.NextChildElement(System.Xml.XmlReader,System.Int32@)">
            <summary>starts with the parent element, and stops when it reaches the same DEPTH again</summary> 
            <param name="reader"> the xml reader positioned at the parent element</param>
            <param name="depth"> indicates the depth level of the parent where to stop</param>
            <returns> true while still inside this level</returns>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.MoveToStartElement(System.Xml.XmlReader)">
            <summary>moves to the next element start</summary> 
            <param name="reader"> the xml reader positioned somewhere</param>
            <returns> true if found, otherwise false (indicating most likely EOF</returns>
        </member>
        <member name="T:Google.GData.Client.BaseNameTable">
            <summary>BaseNameTable. An initialized nametable for faster XML processing
            parses:  
                *  opensearch:totalResults - the total number of search results available (not necessarily all present in the feed).
                *  opensearch:startIndex - the 1-based index of the first result.
                *  opensearch:itemsPerPage - the maximum number of items that appear on one page. This allows clients to generate direct links to any set of subsequent pages.
                *  gData:processed
             </summary>
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.atomNameTable">
            <summary>the nametable itself, based on XML core</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.totalResults">
            <summary>opensearch:totalResults</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.startIndex">
            <summary>opensearch:startIndex</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.itemsPerPage">
            <summary>opensearch:itemsPerPage</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.baseUri">
            <summary>xml base</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.language">
            <summary>xml language</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSOpenSearchRss">
            <summary>
            namespace of the opensearch v1.0 elements
            </summary>
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSOpenSearch11">
            <summary>
            namespace of the opensearch v1.1 elements
            </summary>
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSAtom">
            <summary>static namespace string declaration</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSAppPublishing">
            <summary>namespace for app publishing control, draft version</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSAppPublishingFinal">
            <summary>namespace for app publishing control, final version</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSXml">
            <summary>xml namespace</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gNamespace">
            <summary>GD namespace</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gBatchNamespace">
            <summary>GData batch extension namespace</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gNamespacePrefix">
            <summary>GD namespace prefix</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServicePost">
            <summary>the post definiton in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceFeed">
            <summary>the feed definition in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceBatch">
            <summary>the batch URI definition in the link collection</summary>
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gKind">
            <summary>GData Kind Scheme</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gLabels">
            <summary>label scheme</summary>
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceEdit">
            <summary>the edit definition in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceNext">
            <summary>the next chunk URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServicePrev">
            <summary>the previous chunk URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceSelf">
            <summary>the self URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceAlternate">
            <summary>the alternate URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceMedia">
            <summary>the alternate URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.AtomPrefix">
            <summary>prefix for atom if writing</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gDataPrefix">
            <summary>prefix for gNamespace if writing</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gBatchPrefix">
            <summary>prefix for gdata:batch if writing</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gdErrors">
            <summary>prefix for gd:errors</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gdError">
            <summary>prefix for gd:error</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gdDomain">
            <summary>prefix for gd:domain</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gdCode">
            <summary>prefix for gd:code</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gdLocation">
            <summary>prefix for gd:location</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gdInternalReason">
            <summary>prefix for gd:internalReason</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gAppPublishingPrefix">
            <summary>prefix for appPublishing if writing</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementPubControl">
            <summary>xmlelement for app:control</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementPubDraft">
            <summary>xmlelement for app:draft</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementPubEdited">
            <summary>xmlelement for app:draft</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlEtagAttribute">
            <summary>
            static string for parsing the etag attribute
            </summary>
            <returns></returns>
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchId">
            <summary>xmlelement for batch:id</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchOperation">
            <summary>xmlelement for batch:operation</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchStatus">
            <summary>xmlelement for batch:status</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchInterrupt">
            <summary>xmlelement for batch:interrupted</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchContentType">
            <summary>xmlattribute for batch:status@contentType</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchStatusCode">
            <summary>xmlattribute for batch:status@code</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchReason">
            <summary>xmlattribute for batch:status@reason</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchErrors">
            <summary>xmlelement for batch:status:errors</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchError">
            <summary>xmlelement for batch:status:errors:error</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchSuccess">
            <summary>xmlattribute for batch:interrupted@success</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchParsed">
            <summary>XmlAttribute for batch:interrupted@parsed</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchField">
            <summary>XmlAttribute for batch:interrupted@field</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchUnprocessed">
            <summary>XmlAttribute for batch:interrupted@unprocessed</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlValue">
            <summary>XmlConstant for value in enums</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlName">
            <summary>XmlConstant for name in enums</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeType">
            <summary>XmlAttribute for type in enums</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeKey">
            <summary>XmlAttribute for key in enums</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseNameTable.InitAtomParserNameTable">
            <summary>initializes the name table for use with atom parsing. This is the
            only place where strings are defined for parsing</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Nametable">
            <summary>Read only accessor for atomNameTable</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchId">
            <summary>Read only accessor for BatchId</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchOperation">
            <summary>Read only accessor for BatchOperation</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchStatus">
            <summary>Read only accessor for BatchStatus</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchInterrupt">
            <summary>Read only accessor for BatchInterrupt</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchContentType">
            <summary>Read only accessor for BatchContentType</summary>
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchStatusCode">
            <summary>Read only accessor for BatchStatusCode</summary>
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchErrors">
            <summary>Read only accessor for BatchErrors</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchError">
            <summary>Read only accessor for BatchError</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchReason">
            <summary>Read only accessor for BatchReason</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchField">
            <summary>Read only accessor for BatchReason</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchUnprocessed">
            <summary>Read only accessor for BatchUnprocessed</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchSuccessCount">
            <summary>Read only accessor for BatchSuccessCount</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchFailureCount">
            <summary>Read only accessor for BatchFailureCount</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchParsedCount">
            <summary>Read only accessor for BatchParsedCount</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.TotalResults">
            <summary>Read only accessor for totalResults</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.StartIndex">
            <summary>Read only accessor for startIndex</summary>
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.ItemsPerPage">
            <summary>Read only accessor for itemsPerPage</summary>
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Parameter">
            <summary>Read only accessor for parameter</summary>
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Base">
            <summary>Read only accessor for baseUri</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Language">
            <summary>Read only accessor for language</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Value">
            <summary>Read only accessor for value</summary>
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Type">
            <summary>Read only accessor for value</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Name">
            <summary>Read only accessor for name</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.ETag">
            <summary>Read only accessor for etag</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseNameTable.OpenSearchNamespace(Google.GData.Client.IVersionAware)">
            <summary>
            returns the correct opensearchnamespace to use based
            on the version information passed in. All protocols with 
            version > 1 use opensearch1.1 where version 1 uses
            opensearch 1.0
            </summary>
            <param name="v">The versioninformation</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.BaseNameTable.AppPublishingNamespace(Google.GData.Client.IVersionAware)">
            <summary>
            returns the correct app:publishing namespace to use based
            on the version information passed in. All protocols with 
            version > 1 use the final version of the namespace, where 
            version 1 uses the draft version. 
            </summary>
            <param name="v">The versioninformation</param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.AtomEntryCollection">
            <summary>standard typed collection based on 1.1 framework for FeedEntries
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntryCollection.feed">
            <summary>holds the owning feed</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.#ctor">
            <summary>private default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.#ctor(Google.GData.Client.AtomFeed)">
            <summary>constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.FindById(Google.GData.Client.AtomId)">
            <summary>Fins an atomEntry in the collection 
            based on it's ID. </summary> 
            <param name="value">The atomId to look for</param> 
            <returns>Null if not found, otherwise the entry</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntryCollection.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.Add(Google.GData.Client.AtomEntry)">
            <summary>standard typed add method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.CopyOrMove(Google.GData.Client.AtomEntry)">
            <summary>
            takes an existing atomentry object and either copies it into this feed collection,
            or moves it by creating a source element and copying it in here if the value is actually
            already part of a collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.AtomLinkCollection">
            <summary>standard typed collection based on 1.1 framework for AtomLinks
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLinkCollection.FindService(System.String,System.String)">
            <summary>public AtomLink FindService(string service,string type)
              Retrieves the first link with the supplied 'rel' and/or 'type' value.
              If either parameter is null, the corresponding match isn't needed.
            </summary> 
            <param name="service">the service entry to find</param>
            <param name="type">the link type to find</param>
            <returns>the found link or NULL </returns>
        </member>
        <member name="M:Google.GData.Client.AtomLinkCollection.FindServiceList(System.String,System.String)">
            <summary>public AtomLink FindService(string service,string type)
              Retrieves the first link with the supplied 'rel' and/or 'type' value.
              If either parameter is null, the corresponding match isn't needed.
            </summary> 
            <param name="service">the service entry to find</param>
            <param name="type">the link type to find</param>
            <returns>the found link or NULL </returns>
        </member>
        <member name="T:Google.GData.Client.AtomCategoryCollection">
            <summary>standard typed collection based on 1.1 framework for AtomCategory
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Add(Google.GData.Client.AtomCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Find(System.String)">
            <summary>
            finds the first category with this term
            ignoring schemes
            </summary>
            <param name="term">the category term to search for</param>
            <returns>AtomCategory</returns>
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Find(System.String,Google.GData.Client.AtomUri)">
            <summary>
            finds a category with a given term and scheme
            </summary>
            <param name="term"></param>
            <param name="scheme"></param>
            <returns>AtomCategory or NULL</returns>
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Contains(Google.GData.Client.AtomCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:Google.GData.Client.QueryCategoryCollection">
            <summary>standard typed collection based on 1.1 framework for AtomPerson
            </summary> 
        </member>
        <member name="T:Google.GData.Client.AtomPersonCollection">
            <summary>standard typed collection based on 1.1 framework for AtomPerson
            </summary> 
        </member>
        <member name="T:Google.GData.Client.AtomCollectionBase`1">
            <summary>
            Generic collection base class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Google.GData.Client.AtomCollectionBase`1.List">
            <summary>
            the internal list object that is used
            </summary>
        </member>
        <member name="P:Google.GData.Client.AtomCollectionBase`1.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.Add(`0)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.Clear">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="arr"></param>
            <param name="index"></param>
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.IndexOf(`0)">
            <summary>standard typed accessor method </summary> 
            <param name="value"></param>
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.Insert(System.Int32,`0)">
            <summary>standard typed accessor method </summary> 
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.Remove(`0)">
            <summary>standard typed accessor method </summary> 
            <param name="value"></param>
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.Contains(`0)">
            <summary>standard typed accessor method </summary> 
            <param name="value"></param>
        </member>
        <member name="P:Google.GData.Client.AtomCollectionBase`1.Count">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="P:Google.GData.Client.AtomCollectionBase`1.IsReadOnly">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.GetEnumerator">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:Google.GData.Client.AtomCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="T:Google.GData.Client.ExtensionList">
            <summary>
             internal list to override the add and the constructor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.NotVersionAware">
            <summary>
            Return a new collection that is not version aware.
            </summary>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.#ctor(Google.GData.Client.IVersionAware)">
            <summary>
            returns an extensionlist that belongs to a version aware
            container
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.Add(Google.GData.Client.IExtensionElementFactory)">
            <summary>
            adds value to the extensionlist.
            </summary>
            <param name="value"></param>
            <returns>returns the positin in the list after the add</returns>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.IndexOf(Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.Insert(System.Int32,Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.RemoveAt(System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Google.GData.Client.ExtensionList.Item(System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.System#Collections#Generic#ICollection{Google#GData#Client#IExtensionElementFactory}#Add(Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.Clear">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.Contains(Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.CopyTo(Google.GData.Client.IExtensionElementFactory[],System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Google.GData.Client.ExtensionList.Count">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="P:Google.GData.Client.ExtensionList.IsReadOnly">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.Remove(Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.Remove(System.String,System.String)">
            <summary>
            removes a factory defined by namespace and local name
            </summary>
            <param name="ns">namespace of the factory</param>
            <param name="name">local name of the factory</param>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.GetEnumerator">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:Google.GData.Client.ExtensionList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="T:Google.GData.Client.OAuthParameters">
            <summary>
            Stores the parameters used to make OAuth requests
            </summary>
        </member>
        <member name="M:Google.GData.Client.OAuthParameters.addOrUpdate(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Adds a new key-value pair to the dictionary or updates the value if the key is already present
            </summary>
        </member>
        <member name="M:Google.GData.Client.OAuthParameters.safeGet(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Returns the value corresponding to the key in the dictionary or null if the key is not present
            </summary>
        </member>
        <member name="T:Google.GData.Client.OAuth2Parameters">
            <summary>
            Stores the parameters used to make OAuth 2.0 requests
            </summary>
        </member>
        <member name="P:Google.GData.Client.OAuth2Parameters.AccessType">
            <summary>
            Valid values are:
              * "offline" (default): token endpoint returns both an access and refresh token.
              * "online": only an access token is returned by the token endpoint.
            </summary>
        </member>
        <member name="P:Google.GData.Client.OAuth2Parameters.ResponseType">
            <summary>
            Valid values are:
              * "code" (default): retrieve a code to be exchanged for an acces token.
              * "token": directly retrieve an access token from the auth endpoint.
            </summary>
        </member>
        <member name="P:Google.GData.Client.OAuth2Parameters.ApprovalPrompt">
            <summary>
            Valid values are:
              * "auto" (default): only show the approval prompt if the user never approved.
              * "force": always show the approval prompt.
            </summary>
        </member>
        <member name="T:Google.GData.Client.DocumentQuery">
            <summary>
            A subclass of FeedQuery, to create a document based query URI.
            Provides public properties that describe the different
            aspects of the URI, as well as a composite URI.
            </summary>
        </member>
        <member name="M:Google.GData.Client.DocumentQuery.#ctor(System.String)">
            <summary>
            Constructor - Sets the base URI
            </summary>
            <param name="baseUri"></param>
        </member>
        <member name="P:Google.GData.Client.DocumentQuery.Title">
            <summary>
            The exact or unexact title to query for.
            </summary>
        </member>
        <member name="P:Google.GData.Client.DocumentQuery.Exact">
            <summary>
            If true, then only the exact title string will be looked for.
            </summary>
        </member>
        <member name="M:Google.GData.Client.DocumentQuery.ParseUri(System.Uri)">
            <summary>
            Parses an incoming URI string and sets the instance variables
            of this object.
            </summary>
            <param name="targetUri">Takes an incoming Uri string and parses all the properties of it</param>
            <returns>Throws a query exception when it finds something wrong with the input, otherwise returns a baseuri.</returns>
        </member>
        <member name="M:Google.GData.Client.DocumentQuery.Reset">
            <summary>
            Resets object state to default, as if newly created.
            </summary>
        </member>
        <member name="M:Google.GData.Client.DocumentQuery.CalculateQuery(System.String)">
            <summary>
            Creates the partial URI query string based on all set properties.
            </summary>
            <returns> string => the query part of the URI </returns>
        </member>
        <member name="T:Google.GData.Client.LoggedException">
            <summary>standard exception class to be used inside the query object
            </summary> 
        </member>
        <member name="M:Google.GData.Client.LoggedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.LoggedException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:Google.GData.Client.LoggedException.#ctor(System.String,System.Exception)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
            <param name="exception">inner exception</param>
        </member>
        <member name="M:Google.GData.Client.LoggedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.LoggedException.EnsureLogging">
            <summary>protected void EnsureLogging()</summary> 
        </member>
        <member name="T:Google.GData.Client.ClientQueryException">
            <summary>standard exception class to be used inside the query object
            </summary> 
        </member>
        <member name="M:Google.GData.Client.ClientQueryException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.ClientQueryException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:Google.GData.Client.ClientQueryException.#ctor(System.String,System.Exception)">
            <summary>here to please FxCop and for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.ClientQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="T:Google.GData.Client.ClientFeedException">
            <summary>standard exception class to be used inside the feed object
            </summary> 
        </member>
        <member name="M:Google.GData.Client.ClientFeedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.ClientFeedException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:Google.GData.Client.ClientFeedException.#ctor(System.String,System.Exception)">
            <summary>here to please FxCop and for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.ClientFeedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="T:Google.GData.Client.GDataBatchRequestException">
            <summary>standard exception class to be used inside the feed object
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor">
            <summary>standard overloaded constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor(Google.GData.Client.AtomFeed)">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataBatchRequestException.BatchResult">
            <summary>
            Returns the BatchResult Feed that contains the problem
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor(System.String,System.Exception)">
            <summary>here to please FxCop and for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="T:Google.GData.Client.GDataRequestException">
            <summary>standard exception class to be used inside GDataRequest
            </summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestException.webResponse">
            <summary>holds the webresponse object</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestException.responseText">
            <summary>cache to hold the responseText in an error scenario</summary>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataRequestException.Response">
            <summary>Read only accessor for response</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.ReadResponseString">
            <summary>
            this uses the webresponse object to get at the
            stream send back from the server.
            </summary>
            <returns>the error message</returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestException.ResponseString">
            <summary>
            this is the error message returned by the server
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.String,System.Exception)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="exception"> the inner exception</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.String)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.String,System.Net.WebException)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="exception"> the inner exception</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.String,System.Net.WebResponse)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>overridden to make FxCop happy and future use</summary> 
        </member>
        <member name="T:Google.GData.Client.GDataForbiddenException">
            <summary>exception class thrown when we encounter an access denied
            (HttpSTatusCode.Forbidden) when accessing a server
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataForbiddenException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a forbidden exception</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="T:Google.GData.Client.GDataRedirectException">
            <summary>exception class thrown when we encounter a redirect
            (302 and 307) when accessing a server
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRedirectException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a redirect execption</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="P:Google.GData.Client.GDataRedirectException.Location">
            <summary>
            returns the location header of the webresponse object
            which should be the location we should redirect to
            </summary>
        </member>
        <member name="T:Google.GData.Client.GDataNotModifiedException">
            <summary>exception class thrown when we encounter a not-modified
            response (HttpStatusCode.NotModified) when accessing a server
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataNotModifiedException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a not modified exception</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="T:Google.GData.Client.GDataVersionConflictException">
            <summary>exception class is thrown when you tried 
                 to modified/update a resource and the server detected a version 
                   conflict.
             </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataVersionConflictException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a version conflict exeception</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="T:Google.GData.Client.HttpMethods">
            <summary>a simple static collection of HTTP method strings </summary> 
        </member>
        <member name="F:Google.GData.Client.HttpMethods.Delete">
            <summary>the delete method</summary> 
        </member>
        <member name="F:Google.GData.Client.HttpMethods.Post">
            <summary>the post method</summary> 
        </member>
        <member name="F:Google.GData.Client.HttpMethods.Put">
            <summary>the put method</summary> 
        </member>
        <member name="F:Google.GData.Client.HttpMethods.Get">
            <summary>the get method</summary> 
        </member>
        <member name="T:Google.GData.Client.HttpFormPost">
            <summary>a simple static collection of HTTP form post strings </summary> 
        </member>
        <member name="F:Google.GData.Client.HttpFormPost.Encoding">
            <summary>form encoding</summary> 
        </member>
        <member name="F:Google.GData.Client.HttpFormPost.ReturnContentType">
            <summary>expected return form contenttype</summary> 
        </member>
        <member name="T:Google.GData.Client.AlternativeFormat">
            <summary>enum to describe the different formats that query might return
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AlternativeFormat.Atom">
            <summary>returns an atom format</summary>
        </member>
        <member name="F:Google.GData.Client.AlternativeFormat.Rss">
            <summary>returns RSS 2.0</summary>
        </member>
        <member name="F:Google.GData.Client.AlternativeFormat.OpenSearchRss">
            
            <summary>returns the Open RSS 2.0s</summary>
        </member>
        <member name="F:Google.GData.Client.AlternativeFormat.Unknown">
            <summary>parsing error</summary>
        </member>
        <member name="T:Google.GData.Client.Feed`1">
            <summary>
            a generic Feed class
            </summary>
        </member>
        <member name="M:Google.GData.Client.Feed`1.#ctor(Google.GData.Client.AtomFeed)">
            <summary>
            default constructor that takes the underlying atomfeed
            </summary>
            <param name="af"></param>
        </member>
        <member name="M:Google.GData.Client.Feed`1.#ctor(Google.GData.Client.Service,Google.GData.Client.FeedQuery)">
            <summary>
            constructs a new feed object based on a service and a query
            </summary>
            <param name="service"></param>
            <param name="q"></param>
        </member>
        <member name="P:Google.GData.Client.Feed`1.AtomFeed">
            <summary>
            returns the used feed object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Feed`1.AutoPaging">
            <summary>
            if set to true will cause the feed to add more data when you iterate over it's entries
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Feed`1.StartIndex">
            <summary>
            returns the position in the real feed of the first entry in this feed
            </summary>
            <returns>an int indicating the start in the feed</returns>
        </member>
        <member name="P:Google.GData.Client.Feed`1.PageSize">
            <summary>
            returns the setup paging size of this feed. If you set AutoPaging to true
            this is the size that is used to get more results
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Feed`1.TotalResults">
            <summary>
            returns the number of entries the server believes the feed holds
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Feed`1.Maximum">
            <summary>
            the maximum number of entries to be retrieved. This is normally
            setup using the RequestSettings when the feed is constructed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Feed`1.Settings">
            <summary>
            accessor for the RequestSettings used to construct the feed. Needed to
            construct a query that takes auth into account
            </summary>
        </member>
        <member name="P:Google.GData.Client.Feed`1.Entries">
            <summary>
            returns the initial list of entries.This page is the data
            you got from the Requestobject and will remain constant.
            Unless you set AutoPaging to true, in that case:
            This will go back to the server and fetch data again if
            needed. Example. If you pagesize is 30, you get an initial set of
            30 entries. While enumerating, when reaching 30, the code will go
            to the server and get the next 30 rows. It will continue to do so
            until the server reports no more rows available.
            Note that you should cache the entries returned in a list of your own
            if you want to access them more than once, as this one does no caching on
            it's own.
            </summary>
            <example>
            The following code illustrates a possible use of
            the <c>Entries</c> property:
            <code>
            YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
            YouTubeRequest f = new YouTubeRequest(settings);
            Feed&lt;Playlist&gt; feed = f.GetPlaylistsFeed(null);
            foreach (Vidoe v in feed.Entries)
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.Entry">
            <summary>
            the Entry class is the base class for all Feed of T type feeds
            it encapsulates the AtomEntry
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Entry.#ctor">
            <summary>
             default public constructor, needed for generics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Entry.ToString">
            <summary>
            override for ToString, returns the Entries Title
            </summary>
        </member>
        <member name="M:Google.GData.Client.Entry.EnsureInnerObject">
            <summary>
            needs to be subclassed to ensure the creation of the corrent AtomEntry based
            object
            </summary>
        </member>
        <member name="P:Google.GData.Client.Entry.AtomEntry">
            <summary>
            the original AtomEntry object that this object is standing in for
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Entry.Id">
            <summary>
            returns the Id of an entry
            </summary>
        </member>
        <member name="P:Google.GData.Client.Entry.Self">
            <summary>
            returns the value of the self uri as a string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Entry.Title">
            <summary>
            the title of the Entry.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Entry.AppControl">
            <summary>
            returns the appControl sublement
            </summary>
        </member>
        <member name="P:Google.GData.Client.Entry.IsDraft">
            <summary>
            returns the appControl sublement
            </summary>
        </member>
        <member name="P:Google.GData.Client.Entry.ReadOnly">
            <summary>
            returns true, if the entry has an edit link
            </summary>
        </member>
        <member name="P:Google.GData.Client.Entry.Author">
            <summary>
             returns the first author name in the atom.entry.authors collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Entry.Content">
            <summary>
            returns the string representation of the atom.content element
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Entry.Summary">
            <summary>
            returns the string representation of the atom.Summary element
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Entry.Updated">
            <summary>
            just a thin layer on top of the existing updated of the
            underlying atomentry
            </summary>
        </member>
        <member name="P:Google.GData.Client.Entry.BatchData">
            <summary>
            this returns the batch data for the inner atom object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Entry.Categories">
            <summary>
            returns the categories for the entry
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Entry.MediaSource">
            <summary>access the associated media element. Note, that setting this
            WILL cause subsequent updates to be done using MIME multipart posts
            </summary>
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.Entry.ETag">
            <summary>
            access the associated media element. Note, that setting this
            WILL cause subsequent updates to be done using MIME multipart posts
            </summary>
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.RequestSettings">
            <summary>
            Base requestsettings class. Takes credentials, applicationsname
            and supports pagesizes and autopaging. This class is used to initialize a
            <seealso cref="T:Google.GData.Client.FeedRequest`1"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.RequestSettings.#ctor(System.String)">
            <summary>
            an unauthenticated use case
            </summary>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.RequestSettings.#ctor(System.String,System.String,System.String)">
            <summary>
            a constructor for client login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="userName">the user name</param>
            <param name="passWord">the password</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.RequestSettings.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            a constructor for OpenAuthentication login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="consumerKey">the consumerKey to use</param>
            <param name="consumerSecret">the consumerSecret to use</param>
            <param name="user">the username to use</param>
            <param name="domain">the domain to use</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.RequestSettings.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            a constructor for OpenAuthentication login use cases using 2 or 3-legged OAuth
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="consumerKey">the consumerKey to use</param>
            <param name="consumerSecret">the consumerSecret to use</param>
            <param name="token">The token to be used</param>
            <param name="tokenSecret">The tokenSecret to be used</param>
            <param name="user">the username to use</param>
            <param name="domain">the domain to use</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.RequestSettings.#ctor(System.String,Google.GData.Client.GDataCredentials)">
            <summary>
            a constructor for client login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="credentials">the user credentials</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.RequestSettings.#ctor(System.String,System.String)">
            <summary>
            a constructor for a web application authentication scenario
            </summary>
            <param name="applicationName"></param>
            <param name="authSubToken"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.RequestSettings.#ctor(System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            a constructor for a web application authentication scenario
            </summary>
            <param name="applicationName"></param>
            <param name="authSubToken"></param>
            <param name="privateKey"></param>
            <returns></returns>
        </member>
        <!-- "M:Google.GData.Client.RequestSettings.#ctor(System.String,Google.GData.Client.OAuth2Parameters)" 멤버에 대해 잘못된 형식의 XML 주석은 무시됩니다. -->
        <member name="P:Google.GData.Client.RequestSettings.Credentials">
            <summary>
            returns the Credentials in case of a client login scenario
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.AuthSubToken">
            <summary>
            returns the authsub token to use for a webapplication scenario
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.PrivateKey">
            <summary>
            returns the private key used for authsub authentication
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.Application">
            <summary>
            returns the application name
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.ConsumerKey">
            <summary>
            returns the ConsumerKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.ConsumerSecret">
            <summary>
            returns the ConsumerSecret
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.Token">
            <summary>
            returns the Token for OAuth
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.TokenSecret">
            <summary>
            returns the TokenSecret for OAuth
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.OAuthUser">
            <summary>
            returns the OAuth User
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.OAuthDomain">
            <summary>
            returns the OAuth Domain
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.PageSize">
            <summary>
            the pagesize specifies how many entries should be retrieved per call. If not set,
            the server default will be used. Set it either to -1 (for default) or any value &gt; 0
            to set the pagesize to something the server should honor. Note, that this set's the
            max-results parameter on the query, and the server is free to ignore that and give you less
            entries than you have requested.
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>PageSize</c> property:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       settings.PageSize = 50;
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.AutoPaging">
            <summary>
            AutoPaging specifies if a feed iterator should return to the server to fetch more data
            automatically. If set to false, a loop over feed.Entries will stop when the currently
            fetched set of data reaches it's end.  This is false by default. <seealso cref="P:Google.GData.Client.RequestSettings.Maximum"/>
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>AutoPaging</c> property:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       settings.AutoPaging = true;
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.Maximum">
            <summary>
            the Maximum specifies how many entries should be retrieved in total. This works together with
            <seealso cref="P:Google.GData.Client.RequestSettings.AutoPaging"/>. If set, AutoPaging of a feed will stop when the
            specified amount of entries was iterated over. If Maximum is smaller than PageSize (<seealso cref="P:Google.GData.Client.RequestSettings.PageSize"/>),
            an exception is thrown. The default is -1 (ignored).
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Maximum</c> property:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       settings.PageSize = 50;
                       settings.AutoPaging = true;
                       settings.Maximum = 2000;
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.Timeout">
            <summary>gets and sets the Timeout property used for the created
            HTTPRequestObject in milliseconds. if you set it to -1 it will stick
            with the default of the HTTPRequestObject. From MSDN:
            The number of milliseconds to wait before the request times out.
            The default is 100,000 milliseconds (100 seconds).</summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Timeout</c> property:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       settings.Timout = 10000000;
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.UseSSL">
            <summary>gets and sets the SSL property used for the created
            HTTPRequestObject. If true, all requests will use https
            The default is false.</summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Timeout</c> property:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       settings.UseSSL = true;
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.RequestSettings.ClientLoginHandler">
            <summary>
            ClientLoginHandler - this is the URI that is used to
            retrieve a client login authentication token
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.RequestSettings.CreateHttpWebRequest(System.String,System.String,System.Uri)">
             <summary>
             Creates a HttpWebRequest object that can be used against a given service.
             for a RequestSetting object that is using client login, this might call
             to get an authentication token from the service, if it is not already set.
            
             If this uses client login, and you need to use a proxy, set the application-wide
             proxy first using the GlobalProxySelection
             </summary>
             <param name="serviceName"></param>
             <param name="httpMethod"></param>
             <param name="targetUri"></param>
             <returns></returns>
        </member>
        <member name="T:Google.GData.Client.FeedRequestType">
            <summary>
            the enum used for Get of T requests
            </summary>
        </member>
        <member name="F:Google.GData.Client.FeedRequestType.Next">
            <summary>
            returns the next feed chunk if there is more data
            </summary>
        </member>
        <member name="F:Google.GData.Client.FeedRequestType.Prev">
            <summary>
            returns the previous feed chunk if there is data before
            </summary>
        </member>
        <member name="F:Google.GData.Client.FeedRequestType.Refresh">
            <summary>
            refreshes the actual feed chunk by going to the server and retrieving it again
            </summary>
        </member>
        <member name="T:Google.GData.Client.FeedRequest`1">
            <summary>
            base class for Request objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.#ctor(Google.GData.Client.RequestSettings)">
            <summary>
            default constructor based on a RequestSettings object
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.PrepareService">
            <summary>
            prepares the created service based on the settings
            </summary>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.PrepareService(Google.GData.Client.Service)">
            <summary>
            prepares the passed in service by setting the authentication credentials and the timeout settings
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.PrepareQuery``1(System.String)">
            <summary>
            creates a query object and sets it up based on the settings object.
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.PrepareQuery(Google.GData.Client.FeedQuery)">
            <summary>
            prepares the passed in query objects properties based on the settings
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.CreateUri(System.String)">
            <summary>
            should be used in subclasses to create URIs from strings, so that the OAuth parameters can be
            attached
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.PrepareFeed``1(Google.GData.Client.FeedQuery)">
            <summary>
            creates a feed of Y object based on the query and the settings
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.CreateFeed``1(Google.GData.Client.FeedQuery)">
            <summary>
            the virtual creator function for feeds, so that we can create feedsubclasses in
            in subclasses of the request
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Get``1(Google.GData.Client.FeedQuery)">
            <summary>
            gets a feed object of type T
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Get``1(System.Uri)">
            <summary>
            gets a feed object of type T
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="uri">The Uri to retrieve</param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.FeedRequest`1.Proxy">
            <summary>
            sets the proxy on the service to be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.OnSetOtherProxies(System.Net.IWebProxy)">
            <summary>
            called to set additional proxies if required. Overloaded on the document service
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.FeedRequest`1.AtomService">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Get``1(Google.GData.Client.Feed{``0},Google.GData.Client.FeedRequestType)">
            <summary>
            returns a new feed based on the operation passed in.  This is useful if you either do not use
            autopaging, or want to move to previous parts of the feed, or get a refresh of the current feed
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Get</c> method:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       YouTubeRequest f = new YouTubeRequest(settings);
                        Feed&lt;Playlist&gt; feed = f.GetPlaylistsFeed(null);
                        Feed&lt;Playlist&gt; next = f.Get&lt;Playlist&gt;(feed, FeedRequestType.Next);
             </code>
             </example>
            <param name="feed">the original feed</param>
            <param name="operation">an requesttype to indicate what to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Parse``1(System.IO.Stream,System.Uri)">
            <summary>
            takes an existing stream and creates Feed of entries out of it
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="inputStream"></param>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.ParseEntry``1(System.IO.Stream,System.Uri)">
            <summary>
            takes an existing stream and creates just one entry (the first in the stream)
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="inputStream"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Batch``1(System.Collections.Generic.List{``0},Google.GData.Client.Feed{``0})">
            <summary>
            performs a batch operation.
            </summary>
            <param name="feed">the original feed, used to find the batch endpoing </param>
            <param name="entries">List of entries of type Y, that are to be batched</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Batch``1(System.Collections.Generic.List{``0},Google.GData.Client.Feed{``0},Google.GData.Client.GDataBatchOperationType)">
            <summary>
            performs a batch operation.
            </summary>
            <param name="feed">the original feed, used to find the batch endpoing </param>
            <param name="entries">List of entries of type Y, that are to be batched</param>
            <param name="defaultOperation">indicates the default batch operationtype</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Batch``1(System.Collections.Generic.List{``0},System.Uri,Google.GData.Client.GDataBatchOperationType)">
            <summary>
            performs a batch operation.
            </summary>
            <param name="batchUri">the batch endpoint of the service</param>
            <param name="entries">List of entries of type Y, that are to be batched</param>
            <param name="defaultOperation">The default operation to be used for all entries</param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.FeedRequest`1.Service">
            <summary>
            returns the service instance that is used
            </summary>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Retrieve``1(``0)">
            <summary>
            returns a refreshed version of the entry you passed in, by going back to the server and
            requesting this resource again
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Get</c> method:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       YouTubeRequest f = new YouTubeRequest(settings);
                        Feed&lt;Playlist&gt; feed = f.GetPlaylistsFeed(null);
                        Feed&lt;Playlist&gt; next = f.Get&lt;Playlist&gt;(feed, FeedRequestType.Next);
             </code>
             </example>
            <param name="entry">the entry to get again</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Retrieve``1(System.Uri)">
            <summary>
            returns the entry the Uri pointed to
            </summary>
            <param name="entryUri">the Uri of the entry</param>
            <returns></returns>
        </member>
        <!-- "M:Google.GData.Client.FeedRequest`1.Retrieve``1(Google.GData.Client.FeedQuery)" 멤버에 대해 잘못된 형식의 XML 주석은 무시됩니다. -->
        <member name="M:Google.GData.Client.FeedRequest`1.Update``1(``0)">
            <summary>
            sends the data back to the server.
            </summary>
            <returns>the reflected entry from the server if any given</returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Delete``1(``0)">
            <summary>
            deletes the Entry from the Server
            </summary>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Insert``1(System.Uri,``0)">
            <summary>
            takes the given Entry and inserts its into the server
            </summary>
            <returns>the reflected entry from the server if any given</returns>
        </member>
        <member name="M:Google.GData.Client.FeedRequest`1.Insert``1(Google.GData.Client.Feed{``0},``0)">
            <summary>
            takes the given Entry and inserts it into the server
            </summary>
            <returns>the reflected entry from the server if any given</returns>
        </member>
        <member name="P:Google.GData.Client.FeedRequest`1.Settings">
            <summary>
            the Settings property returns the RequestSettings object that was used to construct this FeedRequest.
            It can be used to alter properties like AutoPaging etc, inbetween Feed creations.
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Settings</c> property:
                     <code>
                    YouTubeRequestSettings settings = new YouTubeRequestSettings("NETUnittests", this.ytClient, this.ytDevKey, this.ytUser, this.ytPwd);
                    YouTubeRequest f = new YouTubeRequest(settings);
                    Feed&lt;Video&gt; feed = f.GetStandardFeed(YouTubeQuery.MostPopular);
                    foreach (Video v in feed.Entries)
                    {
                        f.Settings.PageSize = 50;
                        f.Settings.AutoPaging = true;
                        Feed&lt;Comment&gt; list = f.GetComments(v);
                        foreach (Comment c in list.Entries)
                         {
                            Assert.IsTrue(v.AtomEntry != null);
                             Assert.IsTrue(v.Title != null);
                        }
                      }
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.QueryCategoryOperator">
            <summary>Enum to describe the different category boolean operations.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.QueryCategoryOperator.AND">
            <summary>A logical AND operation.</summary>
        </member>
        <member name="F:Google.GData.Client.QueryCategoryOperator.OR">
            <summary>A logical OR operation.</summary>
        </member>
        <member name="T:Google.GData.Client.QueryCategory">
            <summary>Base class to hold an Atom category plus the boolean
            to create the query category.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.QueryCategory.category">
            <summary>AtomCategory holder.</summary> 
        </member>
        <member name="F:Google.GData.Client.QueryCategory.categoryOperator">
            <summary>Boolean operator (can be OR or AND).</summary> 
        </member>
        <member name="F:Google.GData.Client.QueryCategory.isExcluded">
            <summary>Boolean negator (can be true or false).</summary> 
        </member>
        <member name="M:Google.GData.Client.QueryCategory.#ctor(Google.GData.Client.AtomCategory)">
            <summary>Constructor, given a category.</summary>
        </member>
        <member name="M:Google.GData.Client.QueryCategory.#ctor(System.String,Google.GData.Client.QueryCategoryOperator)">
            <summary>Constructor, given a category as a string from the URI.</summary>
        </member>
        <member name="P:Google.GData.Client.QueryCategory.Category">
            <summary>Accessor method public AtomCategory Category</summary> 
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.QueryCategory.Operator">
            <summary>Accessor method public QueryCategoryOperator Operator</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.QueryCategory.Excluded">
            <summary>Accessor method public bool Excluded</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.FeedQuery">
            <summary>Base class to create a GData query URI. Provides public 
            properties that describe the different aspects of the URI
            as well as a composite URI.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.query">
            <summary>baseUri property holder</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.categories">
            <summary>category part as string, comma seperated</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.author">
            <summary>author part as string</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.extraParameters">
            <summary>extra parameters as string</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.datetimeMin">
            <summary>mininum date/time as DateTime</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.datetimeMax">
            <summary>maximum date/time as DateTime</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.publishedMin">
            <summary>mininum date/time for the publicationdate as DateTime</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.publishedMax">
            <summary>maximum date/time for the publicationdate as DateTime</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.startIndex">
            <summary>start-index as integer</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.numToRetrieve">
            <summary>number of entries to retrieve as integer</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.altFormat">
            <summary>alternative format as AlternativeFormat</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.oauthRequestorId">
            <summary>the oauth requestor id</summary>
        </member>
        <member name="F:Google.GData.Client.FeedQuery.baseUri">
            <summary>the base URI</summary> 
        </member>
        <member name="M:Google.GData.Client.FeedQuery.#ctor">
            <summary>Default constructor.</summary> 
        </member>
        <member name="M:Google.GData.Client.FeedQuery.#ctor(System.String)">
            <summary>constructor taking a base URI constructor. Note, that
            if this form is used, the string will not be parsed. So a uri that
            would have additional query parameters will not have this reflected. 
            this version is primarily there to be used on mobile devices, as on 
            mobile we don't have URI parsing code available.
            </summary> 
        </member>
        <member name="P:Google.GData.Client.FeedQuery.BaseAddress">
            <summary>
            this will simply return/set the baseUri without any parsing as a string
            this is the same as using the constructor for most cases, it is here to allow the creation
            of template methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.PrepareQuery(Google.GData.Client.FeedQuery,Google.GData.Client.RequestSettings)">
            <summary>
            helper method to setup a query object with some parameters 
            based on a requestsettings
            </summary>
            <param name="q"></param>
            <param name="settings"></param>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.Uri">
            <summary>We do not hold on to the precalculated Uri.
            It's safer and cheaper to calculate this on the fly.
            Setting this loses the base Uri.
            Note that the result of this is effected by the UseSSL flag. 
            so if you created this with a NON ssl string, but the flag states you 
            want to use SSL, this will result in an HTTPS URI
            </summary> 
            <returns>returns the complete UriPart that is used to execute the query</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.GetBaseUri">
            <summary>
            Returns the base Uri for the feed.
            </summary>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.CategoryQueriesAsParameter">
            <summary>accessor method public bool CategoryQueriesAsParameter</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.Parse(System.Uri,Google.GData.Client.Service@,Google.GData.Client.FeedQuery@)">
            <summary>Passing in a complete URI, we strip all the
            GData query-related things and then treat the rest
            as the base URI. For this we create a service.</summary> 
            <param name="uri">a complete URI</param>
            <param name="service">the new GData service for this URI</param>
            <param name="query">the parsed query object for this URI</param>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.UseSSL">
            <summary>
            indicates if constructed feed URIs should use http or https
            - if you pass in a full URI, this one will get changed from http to https
            or the other way round. This is mostly relevant for hosted domains. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.Query">
            <summary>Accessor method public string Query.</summary> 
            <returns>returns the query string portion of the URI</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.OAuthRequestorId">
            <summary>set's the OAuth Requestor Identifier. Only useful if 
            you are using the OAuthFactory as well. 
            </summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.Categories">
            <summary>Accessor method public string Category.</summary> 
            <returns>the category filter</returns>
        </member>
        <member name="F:Google.GData.Client.FeedQuery.etag">
            <summary>
            supports the etag for a query. Setting this etag here will create an if-notmatch
            query with the etag given. 
            </summary>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.Etag">
            <summary>
            the Etag value that should be used in the query. Setting this will create an if-match or if-not match
            header
            </summary>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.ExtraParameters">
            <summary>ExtraParameters holds a string that just gets added to the
            query string per se. The parameter should honor URL encoding, the library
            will not touch its value, but just append it to the existing query. The 
            URL parameter characters will be inserted by the FeedQuery object.</summary> 
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.Author">
            <summary>Accessor method public string Author.</summary> 
            <returns>the requested author</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.StartDate">
            <summary>sets the mininum daterange value for the updated element</summary> 
            <returns>the min (inclusive) date/time</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.EndDate">
            <summary>sets the maximum daterange value for the updated element</summary> 
            <returns>the max (exclusive) date/time</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.MinPublication">
            <summary>sets the mininum daterange value for the publication element</summary> 
            <returns>the min (inclusive) date/time</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.MaxPublication">
            <summary>sets the maximum daterange value for the publication element</summary> 
            <returns>the max (exclusive) date/time</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.ModifiedSince">
            <summary>
            sets the ModifiedSince date. If this is set to something different than
            DateTime.MinValue, and the FeedQuery object is used for a Service.Query
            call, this will cause an ifmodified Since header to be created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.StartIndex">
            <summary>Accessor method public int StartIndex.</summary> 
            <returns>the start-index query parameter, a 1-based index
            indicating the first result to be retrieved.</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.NumberToRetrieve">
            <summary>Accessor method public int NumberToRetrieve.</summary> 
            <returns>the number of entries to retrieve</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.FeedFormat">
            <summary>Accessor method public AlternativeFormat FeedFormat.
            </summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.ParseUri(System.Uri)">
            <summary>protected void ParseUri</summary> 
            <param name="targetUri">takes an incoming Uri string and parses all the properties out of it</param>
            <returns>throws a query exception when it finds something wrong with the input, otherwise returns a baseuri</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.ParseCategoryQueryString(System.String)">
            <summary>
            this will take the complete parameter string and split it into parts
            </summary>
            <param name="categories"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.ParseCategoryString(System.String)">
            <summary>
            this will take one category part and parse it
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.ParseUri(System.String)">
            <summary>protected void ParseUri</summary> 
            <param name="target">takes an incoming string and parses all the properties out of it</param>
            <returns>throws a query exception when it finds something wrong with the input, otherwise returns a baseuri</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.CleanPart(System.String)">
            <summary>Takes an incoming URI segment and removes leading/trailing slashes.</summary> 
            <param name="part">the URI segment to clean</param>
            <returns>the cleaned string</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.ValidateUri(System.Uri)">
            <summary>Checks to see if the URI is valid to be used for an Atom query.</summary> 
            <returns>Throws a client exception if not</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.Reset">
            <summary>Resets object state to default, as if newly created.
            </summary> 
        </member>
        <member name="M:Google.GData.Client.FeedQuery.CalculateQuery(System.String)">
            <summary>Creates the complete URI query string based on all set properties.</summary> 
            <returns> string => the query part of the URI</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.InsertionParameter(System.String)">
            <summary>
            checks if the passed in string contains a "?" and if so returns the &amp; as the insertion char
            </summary>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.AppendQueryPart(System.String,System.String,System.Char,System.Text.StringBuilder)">
            <summary>
            helper to format a string parameter into the query
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
            <param name="connect"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.AppendQueryPart(System.Int32,System.Int32,System.String,System.Char,System.Text.StringBuilder)">
            <summary>
            helper to format an integer parameter into the query
            </summary>
            <param name="value"></param>
            <param name="defValue">default value</param>
            <param name="parameterName"></param>
            <param name="connect"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.AppendQueryPart(System.UInt32,System.UInt32,System.String,System.Char,System.Text.StringBuilder)">
            <summary>
            helper to format an unsigned integer parameter into the query
            </summary>
            <param name="value"></param>
            <param name="defValue">default value</param>
            <param name="parameterName"></param>
            <param name="connect"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.AppendQueryPart(System.DateTime,System.String,System.Char,System.Text.StringBuilder)">
            <summary>
            helper to format a DateTime parameter into the query
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
            <param name="connect"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.FormatToString(Google.GData.Client.AlternativeFormat)">
            <summary>Converts an AlternativeFormat to a string for use in
            the query string.</summary> 
            <param name="format">the format that we want to be converted to string </param>
            <returns>string version of the format</returns>
        </member>
        <member name="T:Google.GData.Client.GoogleAuthentication">
            <summary>constants for the authentication handler
            </summary> 
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AccountPrefix">
            <summary>account prefix path </summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.DefaultProtocol">
            <summary>protocol</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.DefaultDomain">
            <summary>
            default authentication domain
            </summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.UriHandler">
            <summary>Google client authentication handler</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Email">
            <summary>Google client authentication email</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Password">
            <summary>Google client authentication password</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Source">
            <summary>Google client authentication source constant</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Service">
            <summary>Google client authentication default service constant</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Lsid">
            <summary>Google client authentication LSID</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Ssid">
            <summary>Google client authentication SSID</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AuthToken">
            <summary>Google client authentication Token</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AuthSubToken">
            <summary>Google authSub authentication Token</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Header">
            <summary>Google client header</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Override">
            <summary>Google method override header</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.WebKey">
            <summary>Google webkey identifier</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.YouTubeClientId">
            <summary>Google YouTube client identifier</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.YouTubeDevKey">
            <summary>Google YouTube developer identifier</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AccountType">
            <summary>Google webkey identifier</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AccountTypeDefault">
            <summary>default value for the account type</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.CaptchaAnswer">
            <summary>captcha url token</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.CaptchaToken">
            <summary>default value for the account type</summary>
        </member>
        <member name="T:Google.GData.Client.GDataGAuthRequestFactory">
            <summary>base GDataRequestFactory implementation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataGAuthRequestFactory.GDataVersion">
            <summary>
            the header used to indicate version requests
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequestFactory.#ctor(System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequestFactory.#ctor(System.String,System.String,System.Int32)">
            <summary>overloaded constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.GAuthToken">
            <summary>Get/Set accessor for gAuthToken</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequestFactory.QueryAuthToken(Google.GData.Client.GDataCredentials)">
            <summary>Gets an authentication token for the current credentials</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.UserAgent">
            <summary>accessor method public string UserAgent, with GFE support</summary> 
            <remarks>GFE will enable gzip support ONLY for browser that have the string
            "gzip" in their user agent (IE or Mozilla), since lot of browsers have a
            broken gzip support.</remarks>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.ApplicationName">
            <summary>Get/Set accessor for the application name</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.Service">
            <summary>returns the service string</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.MethodOverride">
            <summary>Let's assume you are behind a corporate firewall that does not 
            allow all HTTP verbs (as you know, the atom protocol uses GET, 
            POST, PUT and DELETE). If you set MethodOverride to true,
            PUT and DELETE will be simulated using HTTP Post. It will
            add an X-Method-Override header to the request that 
            indicates the "real" method we wanted to send. 
            </summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.StrictRedirect">
            <summary>indicates if a redirect should be followed on not HTTPGet</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.NumberOfRetries">
            <summary>
            property accessor to adjust how often a request of this factory should retry
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.AccountType">
            <summary>
            property accessor to set the account type that is used during
            authentication. Defaults, if not set, to HOSTED_OR_GOOGLE
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.CaptchaAnswer">
            <summary>property to hold the Answer for a challenge</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.CaptchaToken">
            <summary>property to hold the token for a challenge</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.Handler">
            <summary>accessor method public string Handler</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.GDataGAuthRequest">
            <summary>base GDataRequest implementation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataGAuthRequest.requestCopy">
            <summary>holds the input in memory stream</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataGAuthRequest.factory">
            <summary>holds the factory instance</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GDataGAuthRequestFactory)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.GetRequestStream">
            <summary>returns the writable request stream</summary> 
            <returns> the stream to write into</returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequest.RequestCopy">
            <summary>Read only accessor for requestCopy</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.Dispose(System.Boolean)">
            <summary>does the real disposition</summary> 
            <param name="disposing">indicates if dispose called it or finalize</param>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.EnsureCredentials">
            <summary>sets up the correct credentials for this call, pending 
            security scheme</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequest.ResponseVersion">
            <summary>
            returns the version information that the response indicated
            can be NULL if used against a non versioned endpoint
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.EnsureWebRequest">
            <summary>sets the redirect to false after everything else
            is done </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.QueryAuthToken(Google.GData.Client.GDataCredentials)">
            <summary>goes to the Google auth service, and gets a new auth token</summary> 
            <returns>the auth token, or NULL if none received</returns>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.Execute">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.Execute(System.Int32)">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
            <param name="retryCounter">indicates the n-th time this is run</param>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.CopyRequestData">
            <summary>takes our copy of the stream, and puts it into the request stream</summary> 
        </member>
        <member name="T:Google.GData.Client.GAuthSubRequestFactory">
            <summary>
            GDataAuthSubRequestFactory implementation
            </summary>
        </member>
        <member name="F:Google.GData.Client.GAuthSubRequestFactory.privateKey">
            holds the private key that is used to sign the requests
        </member>
        <member name="M:Google.GData.Client.GAuthSubRequestFactory.#ctor(System.String,System.String)">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Google.GData.Client.GAuthSubRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:Google.GData.Client.GAuthSubRequestFactory.Token">
            <summary>
            accessor method public string Token
            </summary>
            <returns>
            the string token for the authsub request
            </returns>
        </member>
        <member name="P:Google.GData.Client.GAuthSubRequestFactory.PrivateKey">
            <summary>
            accessor method public AsymmetricAlgorithm PrivateKey
            </summary>
            <returns>
            the private Key used for the authsub request
            </returns>
        </member>
        <member name="T:Google.GData.Client.GAuthSubRequest">
            <summary>
            base GDataRequest implementation
            </summary>
        </member>
        <member name="F:Google.GData.Client.GAuthSubRequest.factory">
            <summary>holds the factory instance</summary> 
        </member>
        <member name="M:Google.GData.Client.GAuthSubRequest.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GAuthSubRequestFactory)">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Google.GData.Client.GAuthSubRequest.EnsureCredentials">
            <summary>
            sets up the correct credentials for this call, pending 
            security scheme
            </summary>
        </member>
        <member name="T:Google.GData.Client.GDataBatchOperationType">
            <summary>enum to define the GDataBatchOperationType...</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.insert">
            <summary>this is an insert operatoin</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.update">
            <summary>this is an update operation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.delete">
            <summary>this is a delete operation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.query">
            <summary>this is a query operation</summary>
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.Default">
            <summary>the default (a no-op)</summary>
        </member>
        <member name="T:Google.GData.Client.GDataBatchStatus">
            <summary>
            holds the batch status information
            </summary>
        </member>
        <member name="F:Google.GData.Client.GDataBatchStatus.CodeDefault">
            <summary>default value for the status code</summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchStatus.#ctor">
            <summary>
            sets the defaults for code
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.Code">
            <summary>returns the status code of the operation</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.Reason">
            <summary>accessor method public string Reason</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.ContentType">
            <summary>accessor method public string ContentType</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.Errors">
            <summary>the error list</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.GDataBatchStatus.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatchStatus object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:Google.GData.Client.GDataBatchStatus.ParseBatchStatus(System.Xml.XmlReader,Google.GData.Client.AtomFeedParser)">
            <summary>
            reads the current positioned reader and creates a batchstatus element
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <param name="parser">The Feedparser to be used</param>
            <returns>GDataBatchStatus</returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.XmlName">
            <summary>
            the xmlname of the element
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.XmlNameSpace">
            <summary>
             the xmlnamespace for a batchstatus
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.XmlPrefix">
            <summary>
            the preferred xmlprefix to use
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchStatus.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>
            creates a new batchstatus element
            </summary>
            <param name="node"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.GDataBatchError">
            <summary>
            represents the Error element in the GDataBatch response
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchError.Type">
            <summary>accessor method Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchError.Field">
            <summary>accessor method public string Field</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchError.Reason">
            <summary>accessor method public string Reason</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.GDataBatchError.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatchError object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:Google.GData.Client.GDataBatchError.ParseBatchErrors(System.Xml.XmlReader,Google.GData.Client.AtomFeedParser,Google.GData.Client.GDataBatchStatus)">
            <summary>
            parses a list of errors
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <param name="status">the batch status element to add the errors tohe</param>
            <param name="parser">the feedparser to be used</param>
        </member>
        <member name="M:Google.GData.Client.GDataBatchError.ParseBatchError(System.Xml.XmlReader,Google.GData.Client.AtomFeedParser)">
            <summary>
            parses a single error element
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <param name="parser">the feedparser to be used</param>
            <returns>GDataBatchError</returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchError.XmlName">
            <summary>
            the name to use
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchError.XmlNameSpace">
            <summary>
            the namespace to use
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchError.XmlPrefix">
            <summary>
            the preferred prefix
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchError.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>
            creates a GDataBatchError element 
            </summary>
            <param name="node"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.GDataBatchInterrupt">
            <summary>
            holds the batch status information
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Reason">
            <summary>accessor method public string Reason</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Successes">
            <summary>accessor method public int Successes</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Failures">
            <summary>accessor method public int Failures</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Unprocessed">
            <summary>accessor method public int Unprocessed</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Parsed">
            <summary>accessor method public int Parsed</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.GDataBatchInterrupt.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatchInterrupt object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:Google.GData.Client.GDataBatchInterrupt.ParseBatchInterrupt(System.Xml.XmlReader,Google.GData.Client.AtomFeedParser)">
            <summary>
            parses a batchinterrupt element from a correctly positioned reader
            </summary>
            <param name="reader">XmlReader at the start of the element</param>
            <param name="parser">the feedparser to be used</param>
            <returns>GDataBatchInterrupt</returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.XmlName">
            <summary>
            returns the xmlname to sue
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.XmlNameSpace">
            <summary>
            returns the xmlnamespace
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.XmlPrefix">
            <summary>
            the xmlprefix
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchInterrupt.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>
            factory method to create an instance of a batchinterrupt during parsing
            </summary>
            <param name="node">the xmlnode that is going to be parsed</param>
            <param name="parser">the feedparser that is used right now</param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.GDataBatchFeedData">
            <summary>The GDataFeedBatch object holds batch related information
            for the AtomFeed
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchFeedData.#ctor">
            <summary>
            constructor, set's the default for the operation type
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchFeedData.Type">
            <summary>accessor method public GDataBatchOperationType Type</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.GDataBatchFeedData.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatch object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:Google.GData.Client.GDataBatchFeedData.XmlName">
            <summary>
            the xmlname to use
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchFeedData.XmlNameSpace">
            <summary>
            the xml namespace to use
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchFeedData.XmlPrefix">
            <summary>
            the xmlprefix to use
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchFeedData.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>
            factory method to create an instance of a batchinterrupt during parsing
            </summary>
            <param name="node">the xmlnode that is going to be parsed</param>
            <param name="parser">the feedparser that is used right now</param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.GDataBatchEntryData">
            <summary>The GDataEntryBatch object holds batch related information
            for an AtomEntry
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchEntryData.#ctor">
            <summary>
            constructor, sets the default for the operation type
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchEntryData.#ctor(Google.GData.Client.GDataBatchOperationType)">
            <summary>
            Constructor for the batch data
            </summary>
            <param name="type">The batch operation to be performed</param>
        </member>
        <member name="M:Google.GData.Client.GDataBatchEntryData.#ctor(System.String,Google.GData.Client.GDataBatchOperationType)">
            <summary>
            Constructor for batch data
            </summary>
            <param name="id">The batch ID of this entry</param>
            <param name="type">The batch operation to be performed</param>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.Type">
            <summary>accessor method public GDataBatchOperationType Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.Id">
            <summary>accessor method public string Id</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.Interrupt">
            <summary>accessor for the GDataBatchInterrrupt element</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.Status">
            <summary>accessor method public GDataBatchStatus Status</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.GDataBatchEntryData.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataEntryBatch object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.XmlName">
            <summary>
            xml local name to use
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.XmlNameSpace">
            <summary>
            xml namespace to use
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.XmlPrefix">
            <summary>
            xml prefix to use
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchEntryData.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>
            creates a new GDataBatchEntryData
            </summary>
            <param name="node"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.GOAuthRequestFactory">
            <summary>
            A request factory to generate an authorization header suitable for use
            with OAuth.
            </summary>
        </member>
        <member name="F:Google.GData.Client.GOAuthRequestFactory.GDataGAuthSubAgent">
            <summary>this factory's agent</summary> 
        </member>
        <member name="M:Google.GData.Client.GOAuthRequestFactory.#ctor(System.String,System.String)">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:Google.GData.Client.GOAuthRequestFactory.#ctor(System.String,System.String,Google.GData.Client.OAuthParameters)">
            <summary>
            overloaded constructor that sets parameters from an OAuthParameter instance.
            </summary>
        </member>
        <member name="M:Google.GData.Client.GOAuthRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="T:Google.GData.Client.GOAuthRequest">
            <summary>
            GOAuthSubRequest implementation.
            </summary>
        </member>
        <member name="F:Google.GData.Client.GOAuthRequest.factory">
            <summary>holds the factory instance</summary> 
        </member>
        <member name="M:Google.GData.Client.GOAuthRequest.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GOAuthRequestFactory)">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:Google.GData.Client.GOAuthRequest.EnsureCredentials">
            <summary>
            sets up the correct credentials for this call.
            </summary>
        </member>
        <member name="T:Google.GData.Client.GOAuth2RequestFactory">
            <summary>
            A request factory to generate an authorization header suitable for use
            with OAuth 2.0.
            </summary>
        </member>
        <member name="F:Google.GData.Client.GOAuth2RequestFactory.GDataGAuthSubAgent">
            <summary>this factory's agent</summary>
        </member>
        <member name="M:Google.GData.Client.GOAuth2RequestFactory.#ctor(System.String,System.String,Google.GData.Client.OAuth2Parameters)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Google.GData.Client.GOAuth2RequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="T:Google.GData.Client.GOAuth2Request">
            <summary>
            GOAuthSubRequest implementation.
            </summary>
        </member>
        <member name="F:Google.GData.Client.GOAuth2Request.factory">
            <summary>holds the factory instance</summary>
        </member>
        <member name="M:Google.GData.Client.GOAuth2Request.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GOAuth2RequestFactory)">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:Google.GData.Client.GOAuth2Request.EnsureCredentials">
            <summary>
            sets up the correct credentials for this call.
            </summary>
        </member>
        <member name="M:Google.GData.Client.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s">The HTML string to decode. </param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:Google.GData.Client.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The HTML string to decode</param>
            <param name="output">The TextWriter output stream containing the decoded string. </param>
        </member>
        <member name="M:Google.GData.Client.HttpUtility.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string and returns the encoded string.
            </summary>
            <param name="s">The text string to encode. </param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="M:Google.GData.Client.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode. </param>
            <param name="output">The TextWriter output stream containing the encoded string. </param>
        </member>
        <member name="T:Google.GData.Client.GDataLoggingRequestFactory">
            <summary>base GDataRequestFactory implmentation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequestFactory.strInput">
            <summary>holds the filename for the input request</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequestFactory.strOutput">
            <summary>holds the filename for the output response</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequestFactory.strCombined">
            <summary>holds the filename for the combined logger</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataLoggingRequestFactory.RequestFileName">
            <summary>accessor method public string RequestFileName</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataLoggingRequestFactory.ResponseFileName">
            <summary>accessor method public string ResponseFileName</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataLoggingRequestFactory.CombinedLogFileName">
            <summary>accessor method public string CombinedLogFileName</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequestFactory.#ctor(System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="T:Google.GData.Client.GDataLoggingRequest">
            <summary>base GDataRequest implementation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequest.strInput">
            <summary>holds the filename for the input request</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequest.strOutput">
            <summary>holds the filename for the output response</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequest.strCombined">
            <summary>holds the filename for the combined logger</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GDataGAuthRequestFactory,System.String,System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.Dispose(System.Boolean)">
            <summary>does the real disposition</summary> 
            <param name="disposing">indicates if dispose called it or finalize</param>
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.Execute">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.LogRequest(System.Net.WebRequest)">
            <summary>Log's the request object if overridden in subclass</summary>
            <param name="request">the request to log</param> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.LogResponse(System.Net.WebResponse)">
            <summary>Log's the response object if overridden in subclass</summary>
            <param name="response">the response to log</param> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.Reset">
            <summary>resets the object's state</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.SaveStream(System.IO.Stream,System.IO.StreamWriter,System.IO.StreamWriter)">
            <summary>private void SaveStream()</summary> 
            <param name="stream">the stream to save </param>
            <param name="outOne">the first stream to save into </param>
            <param name="outCombined">the combined stream to save into</param>
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.SaveHeaders(System.Boolean,System.Net.WebHeaderCollection,System.String,System.Uri,System.IO.StreamWriter)">
            <summary>private void SaveStream()</summary> 
            <param name="isRequest">indicates wether this is a request or a response log</param>
            <param name="headers"> the webheader collection to save</param>
            <param name="method"> indicates the HTTP method used</param>
            <param name="target">the target URI of the request</param>
            <param name="outputStream">the stream to save to</param>
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.GetResponseStream">
            <summary>gets the readable response stream. In the logger, we need to
            copy the response to be able to log it. So we return a memory stream</summary> 
            <returns> the response stream</returns>
        </member>
        <member name="T:Google.GData.Client.MediaService">
            <summary>MediaService implementation. Adds the ability to send MimeMultipart
            message (used for Piasa/YouTube etc
            </summary> 
        </member>
        <member name="M:Google.GData.Client.MediaService.#ctor(System.String)">
            <summary>default constructor, sets the default GDataRequest</summary> 
        </member>
        <member name="M:Google.GData.Client.MediaService.#ctor(System.String,System.String)">
            <summary>this will trigger the creation of an authenticating service</summary> 
        </member>
        <member name="M:Google.GData.Client.MediaService.EntrySend(System.Uri,Google.GData.Client.AtomBase,Google.GData.Client.GDataRequestType,Google.GData.Client.AsyncSendData)">
            <summary>Inserts an AtomBase entry against a Uri. The overloaded
            version here will check if this is an AbstractEntry and if it has
            a media property set. If so, it will create a mime multipart envelope</summary> 
            <param name="feedUri">the uri for the feed this object should be posted against</param> 
            <param name="baseEntry">the entry to be inserted</param> 
            <param name="type">the type of request to create</param> 
            <param name="data">the async data payload</param>
            <returns> the response as a stream</returns>
        </member>
        <member name="M:Google.GData.Client.MediaService.CreateBoundary(System.IO.StreamWriter,System.String)">
            <summary>
            creates the MIME boundary string
            </summary>
            <param name="w">stream to write to</param>
            <param name="contentType">content type to use</param>
        </member>
        <member name="T:Google.GData.Client.MediaSource">
            <summary>
            placeholder for a media object to be uploaded
            the base class only defines some primitives like content type
            </summary>
        </member>
        <member name="M:Google.GData.Client.MediaSource.#ctor(System.String)">
            <summary>
            constructs a media source based on a contenttype
            </summary>
            <param name="contenttype">the contenttype of the file</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.MediaSource.#ctor(System.String,System.String)">
            <summary>
            constructs a media source based on a contenttype and a name
            </summary>
            <param name="name">the name of the content</param>
            <param name="contenttype">the contenttype of the file</param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.MediaSource.ContentLength">
            <summary>
            returns the length of the content of the media source
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.MediaSource.Name">
            <summary>
            the name value of the content influence directly the slug
            header send
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.MediaSource.ContentType">
            <summary>
            returns the contenttype of the media source, like img/jpg
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.MediaSource.Data">
            <summary>
            returns a stream of the actual content that is base64 encoded
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.MediaSource.GetDataStream">
            <summary>
            returns a stream of the actual content that is base64 encoded
            </summary>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.MediaFileSource">
            <summary>
            a file based implementation. Takes a filename as it's base working mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.MediaFileSource.#ctor(System.String,System.String)">
            <summary>
            constructor. note that you can override the slug header without influencing the filename
            </summary>
            <param name="fileName">the file to be used, this will be the default slug header</param>
            <param name="contentType">the content type to be used</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.MediaFileSource.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            constructor. note that you can override the slug header without influencing the filename
            </summary>
            <param name="data">The stream for the file. If this constructor is used, the filename is only 
            used for descriptive purposes, the data will be read from the passed stream</param>
            <param name="fileName">the file to be used, this will be the default slug header</param>
            <param name="contentType">the content type to be used</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.MediaFileSource.GetContentTypeForFileName(System.String)">
            <summary>
            tries to get a contenttype for a filename by using the classesRoot
            in the registry. Will FAIL if that filetype is not registered with a
            contenttype
            </summary>
            <param name="fileName"></param>
            <returns>NULL or the registered contenttype</returns>
        </member>
        <member name="P:Google.GData.Client.MediaFileSource.ContentLength">
            <summary>
            returns the content lenght of the file
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.MediaFileSource.Data">
            <summary>
            returns the stream for the file. The file will be opened in readonly mode
            note, the caller has to release the resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.MediaFileSource.GetDataStream">
            <summary>
            returns the stream for the file. The file will be opened in readonly mode
            note, the caller has to release the resource
            </summary>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.OAuthBase">
            <summary>
            The original OAuth code from http://eran.sandler.co.il/, hosted at http://oauth.net
            Modified only to change namespace.
            Written by Eran Sandler (http://eran.sandler.co.il)
            Edited by Claudio Cherubino and Alain Vongsouvanh
            </summary>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Helper function to compute a hash value
            </summary>
            <param name="hashAlgorithm">The hashing algorithm used. If that algorithm needs some initialization,
            like HMAC and its derivatives, they should be initialized prior to passing it to this function</param>
            <param name="data">The data to hash</param>
            <returns>a Base64 string of the hash value</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GetQueryParameters(System.String)">
            <summary>
            Overloaded version of GetQueryParameters to work without a IDictionary parameter
            </summary>
            <param name="querystring">The query string part of the Url</param>
            <returns>A sorted dictionary with string keys and values representing the query parameters</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GetQueryParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Internal function to parse query string parameters and merge them with an existing dictionary
            </summary>
            <param name="querystring">The query string part of the Url</param>
            <param name="dict">The dictionary to be merged with the query string parameters</param>
            <returns>A sorted dictionary with string keys and values representing the query parameters merged with
            the values taken from the dictionary passed as parameter</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.EncodingPerRFC3986(System.String)">
            <summary>
            All parameter names and values are escaped using the [RFC3986]
            percent-encoding (%xx) mechanism. Characters not in the unreserved character
            MUST be encoded. Characters in the unreserved character set MUST NOT be encoded.
            Hexadecimal characters in encodings MUST be upper case. Text names and values MUST be
            encoded as UTF-8 octets before percent-encoding them per [RFC3629]
            </summary>
            <param name="value">The value to Url encode</param>
            <returns>Returns a Url encoded string</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.NormalizeRequestParameters(System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            Normalizes the request parameters according to the spec for the signature generation.
            </summary>
            <param name="parameters">The sorted dictionary containing parameters</param>
            <returns>a string representing the normalized parameters</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateSignatureBase(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="timeStamp">The OAuth timestamp. Must be a valid timestamp and equal or greater than
            timestamps used in previous requests</param>
            <param name="nonce">The OAuth nonce. A random string uniquely generated for each request</param>
            <param name="signatureType">The signature type.</param>
            <returns>The signature base</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateSignatureBase(System.Uri,System.String,Google.GData.Client.OAuthParameters)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="parameters">The OAuth parameters</param>
            <returns>The signature base</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateSignatureUsingHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Generate the signature value based on the given signature base and hash algorithm
            </summary>
            <param name="signatureBase">The signature based as produced by the GenerateSignatureBase method or by any other means</param>
            <param name="hash">The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a signature using the HMAC-SHA1 algorithm
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="timeStamp">The OAuth timestamp. Must be a valid timestamp and equal or greater than
            timestamps used in previous requests</param>
            <param name="nonce">The OAuth nonce. A random string uniquely generated for each request</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a signature using the specified signatureMethod
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="timeStamp">The OAuth timestamp. Must be a valid timestamp and equal or greater than
            timestamps used in previous requests</param>
            <param name="nonce">The OAuth nonce. A random string uniquely generated for each request</param>
            <param name="signatureMethod">The type of signature to use</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateSignature(System.Uri,System.String,Google.GData.Client.OAuthParameters)">
            <summary>
            Generates a signature using the specified signatureMethod
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="parameters">The OAuth parameters</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateOAuthSignatureEncoded(System.String,System.String)">
            <summary>
            oauth_signature is set to the concatenated encoded values of the Consumer Secret and Token Secret,
            separated by a ??character (ASCII code 38), even if either secret is empty. This version calls
            GenerateOAuthSignature and encodes the whole signature again
            The result MUST be encoded again.
            </summary>
            <param name="consumerSecret"></param>
            <param name="tokenSecret"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateOAuthSignature(System.String,System.String)">
            <summary>
            oauth_signature is set to the concatenated encoded values of the Consumer Secret and Token Secret,
            separated by a ??character (ASCII code 38), even if either secret is empty.
            The result MUST be encoded again.
            </summary>
            <param name="consumerSecret"></param>
            <param name="tokenSecret"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateTimeStamp">
            <summary>
            Generate the timestamp for the signature
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GenerateNonce">
            <summary>
            Generate a nonce
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GetExchangeAccessCodeRequestBody(Google.GData.Client.OAuth2Parameters)">
            <summary>
            Generate the request body for exchanging an access code for an access token.
            </summary>
            <param name="parameters">The OAuth 2.0 parameters</param>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GetRefreshAccessTokenRequestBody(Google.GData.Client.OAuth2Parameters)">
            <summary>
            Generate the request body for refreshing an access token.
            </summary>
            <param name="parameters">The OAuth 2.0 parameters</param>
        </member>
        <member name="M:Google.GData.Client.OAuthBase.GetOAuth2AccessToken(Google.GData.Client.OAuth2Parameters,System.String)">
            <summary>
            Send the request body to the OAuth 2.0 token endpoint to retrieve an access token.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            AccessToken, RefreshToken and TokenExpiry.
            </summary>
            <param name="parameters">The OAuth 2.0 parameters</param>
            <param name="requestBody">The request body to send</param>
        </member>
        <member name="T:Google.GData.Client.OAuthUri">
            <summary>
            An implementation of Uri that will create an uri with an 
            xoauth_requestor_id query string.
            </summary>
        </member>
        <member name="M:Google.GData.Client.OAuthUri.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a Uri with a xoauth_requestor_id query string.
            </summary>
            <param name="uriString">The base Uri</param>
            <param name="userName">The username for the xoauth_requestor_id</param>
            <param name="domain">The domain for the xoauth_requestor_id</param>
        </member>
        <member name="T:Google.GData.Client.OAuthUtil">
            <summary>
            Provides a means to generate an OAuth signature suitable for use
            with Google OAuth requests.
            </summary>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.GenerateHeader(System.Uri,System.String,System.String,System.String)">
            <summary>
            Generates an OAuth header.
            </summary>
            <param name="uri">The URI of the request</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer secret</param>
            <param name="httpMethod">The http method</param>
            <returns>The OAuth authorization header</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.GenerateHeader(System.Uri,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates an OAuth header.
            </summary>
            <param name="uri">The URI of the request</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer secret</param>
            <param name="token">The OAuth token</param>
            <param name="tokenSecret">The OAuth token secret</param>
            <param name="httpMethod">The http method</param>
            <returns>The OAuth authorization header</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.GenerateHeader(System.Uri,System.String,Google.GData.Client.OAuthParameters)">
            <summary>
            Generates an OAuth header.
            </summary>
            <param name="uri">The URI of the request</param>
            <param name="httpMethod">The http method</param>
            <param name="parameters">The OAuth parameters</param>
            <returns>The OAuth authorization header</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.GetUnauthorizedRequestToken(Google.GData.Client.OAuthParameters)">
            <summary>
            Contacts Google for a request token, first step of the OAuth authentication process.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            Token and TokenSecret.
            </summary>
            <param name="parameters">The OAuth parameters</param>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.CreateUserAuthorizationUrl(Google.GData.Client.OAuthParameters)">
            <summary>
            Generates the url which the user should visit in order to authenticate and
            authorize with the Service Provider.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            Token and TokenSecret.
            </summary>
            <param name="parameters">The OAuth parameters</param>
            <returns>The full authorization url the user should visit</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.UpdateOAuthParametersFromCallback(System.String,Google.GData.Client.OAuthParameters)">
            <summary>
            Helper method which parses a querystring for the OAuth related parameters.
            It updates the OAuthParameter instance passed as parameter by setting
            Token, TokenSecret and Verifier (if present).
            </summary>
            <param name="parameters">The OAuth parameters</param>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.GetAccessToken(Google.GData.Client.OAuthParameters)">
            <summary>
            Exchanges the user-authorized request token for an access token.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            Token and TokenSecret.
            </summary>
            <param name="parameters">The OAuth parameters</param>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.CreateOAuth2AuthorizationUrl(Google.GData.Client.OAuth2Parameters)">
            <summary>
            Generates the url which the user should visit in order to authenticate and
            authorize with the Service Provider.
            When successful, updates the OAuth2Parameters instance passed as parameter by setting
            the returned access code.
            </summary>
            <param name="parameters">The OAuth 2.0 parameters</param>
            <returns>The full authorization url the user should visit</returns>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.GetAccessToken(System.String,Google.GData.Client.OAuth2Parameters)">
            <summary>
            Exchanges the user-authorized request token for an OAuth 2.0 access token.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            AccessToken, RefreshToken and TokenExpiry.
            </summary>
            <param name="queryString">The query string containing the access code</param>
            <param name="parameters">The OAuth 2.0 parameters</param>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.GetAccessToken(Google.GData.Client.OAuth2Parameters)">
            <summary>
            Exchanges the user-authorized request token for an OAuth 2.0 access token.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            AccessToken, RefreshToken and TokenExpiry.
            </summary>
            <param name="parameters">The OAuth 2.0 parameters</param>
        </member>
        <member name="M:Google.GData.Client.OAuthUtil.RefreshAccessToken(Google.GData.Client.OAuth2Parameters)">
            <summary>
            Refresh the OAuth 2.0 access token.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            AccessToken, RefreshToken and TokenExpiry.
            </summary>
            <param name="parameters">The OAuth 2.0 parameters</param>
        </member>
        <member name="T:Google.GData.Client.GDataCredentials">
            <summary>
            the class holds username and password to replace networkcredentials
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataCredentials.#ctor(System.String,System.String)">
            <summary>
            default constructor
            </summary>
            <param name="username">the username to use</param>
            <param name="password">the password to use</param>
        </member>
        <member name="M:Google.GData.Client.GDataCredentials.#ctor(System.String)">
            <summary>
            default constructor
            </summary>
            <param name="clientToken">the client login token to use</param>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.Username">
            <summary>the username used for authentication</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.AccountType">
            <summary>the type of Account used</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.CaptchaToken">
            <summary>in case you need to handle catpcha responses for this account</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.CaptchaAnswer">
            <summary>in case you need to handle catpcha responses for this account</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.Password">
            <summary>accessor method Password</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.ClientToken">
            <summary>
            returns the stored clienttoken
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.NetworkCredential">
            <summary>
            returns a windows conforming NetworkCredential 
            </summary>
        </member>
        <member name="T:Google.GData.Client.GDataRequestFactory">
            <summary>base GDataRequestFactory implementation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.GDataAgent">
            <summary>this factory's agent</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.DefaultContentType">
            <summary>
            the default content type for the atom envelope
            </summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.userAgent">
            <summary>holds the user-agent</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.SetCookieHeader">
            <summary>Cookie setting header, returned from server</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.CookieHeader">
            <summary>Cookie client header</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.SlugHeader">
            <summary>Slug client header</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.ContentOverrideHeader">
            <summary>content override header for resumable upload</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.ContentLengthOverrideHeader">
            <summary>content length header for resumable upload</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.EtagHeader">
            <summary>
            constant for the Etag header
            </summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.IfMatch">
            <summary>
            constant for the If-Match header
            </summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.IfNoneMatch">
            <summary>
            constant for the if-None-match header
            </summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.IfMatchAll">
            <summary>
            constant for the ifmatch value that matches everything
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataRequestFactory.#ctor(System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.UseGZip">
            <summary>whether or not new requests should use GZip</summary>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.Cookies">
            <summary>The cookie container that is used for requests.</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.ContentType">
            <summary>sets and gets the Content Type, used for binary transfers</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.Slug">
            <summary>sets and gets the slug header, used for binary transfers
            note that the data will be converted to ASCII and URLencoded on setting it
            </summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.UserAgent">
            <summary>accessor method public string UserAgent</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.Proxy">
            <summary>accessor method to the webproxy object to use</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.KeepAlive">
            <summary>indicates if the connection should be kept alive, default
            is true</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.UseSSL">
            <summary>indicates if the connection should use https</summary>
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.Timeout">
            <summary>gets and sets the Timeout property used for the created
            HTTPRequestObject in milliseconds. if you set it to -1 it will stick 
            with the default of the HTTPRequestObject. From MSDN:
            The number of milliseconds to wait before the request times out. 
            The default is 100,000 milliseconds (100 seconds).</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.CustomHeaders">
            <summary>accessor method public StringArray CustomHeaders</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.GDataRequest">
            <summary>base GDataRequest implementation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.webRequest">
            <summary>holds the webRequest object</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.webResponse">
            <summary>holds the webresponse object</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.targetUri">
            <summary>holds the target Uri</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.type">
            <summary>holds request type</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.credentials">
            <summary>holds the credential information</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.requestStream">
            <summary>holds the request if a stream is open</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.disposed">
            <summary>holds if we are disposed</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.useGZip">
            <summary>set whether or not this request should use GZip</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequest.ifModifiedSince">
            <summary>holds the timestamp for conditional GET</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequest.responseStream">
            <summary>stream from the response</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequest.contentType">
            <summary>holds the contenttype to use if overridden</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequest.slugHeader">
            <summary>holds the slugheader to use if overridden</summary>
        </member>
        <member name="M:Google.GData.Client.GDataRequest.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GDataRequestFactory)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.Dispose">
            <summary>implements the disposable interface</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataRequest.TargetUri">
            <summary>
            exposing the private targetUri so that subclasses can override
            the value for redirect handling
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.UseGZip">
            <summary>set whether or not this request should use GZip</summary>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.IfModifiedSince">
            <summary>set a timestamp for conditional GET</summary>
        </member>
        <member name="M:Google.GData.Client.GDataRequest.Dispose(System.Boolean)">
            <summary>does the real disposition</summary> 
            <param name="disposing">indicates if dispose called it or finalize</param>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.Credentials">
            <summary>accessor method for the GDataCredentials used</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.ContentType">
            <summary>sets and gets the content Type, used for binary transfers</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.Etag">
            <summary>sets and gets the etag header value, used for concurrency</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.Slug">
            <summary>sets and gets the slugHeader, used for binary transfers
            will encode to ascii and urlencode the string on setting it. 
            </summary>
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.ContentLength">
            <summary>
            returnes the content-length of the response, -1 if none was given
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.Request">
            <summary>accessor method protected WebRequest Request</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.Response">
            <summary>accessor method protected WebResponse Response</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.GDataRequest.Reset">
            <summary>resets the object's state</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.GetRequestStream">
            <summary>returns the writable request stream</summary> 
            <returns> the stream to write into</returns>
        </member>
        <member name="M:Google.GData.Client.GDataRequest.EnsureWebRequest">
            <summary>ensures that the correct HTTP verb is set on the stream</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.EnsureCredentials">
            <summary>sets up the correct credentials for this call, pending 
            security scheme</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.LogRequest(System.Net.WebRequest)">
            <summary>Logs the request object if overridden in subclass</summary>
            <param name="request">the request to log</param> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.LogResponse(System.Net.WebResponse)">
            <summary>Logs the response object if overridden in subclass</summary>
            <param name="response">the response to log</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequest.Execute">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.GetResponseStream">
            <summary>gets the readable response stream</summary> 
            <returns> the response stream</returns>
        </member>
        <member name="M:Google.GData.Client.GDataRequest.GetFinalizedRequest">
            <summary>returns a valid web request with the correct credentials</summary> 
            <returns>the HTTP web request</returns>
        </member>
        <member name="T:Google.GData.Client.RssFeedParser">
            <summary>RssFeedParser
            </summary> 
        </member>
        <member name="M:Google.GData.Client.RssFeedParser.#ctor">
            <summary>standard empty constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.RssFeedParser.Parse(System.IO.Stream,Google.GData.Client.AtomFeed)">
            <summary>starts the parsing process</summary> 
            <param name="streamInput">input stream to parse </param>
            <param name="feed">the feed object to construct</param>
        </member>
        <member name="T:Google.GData.Client.ServiceEventArgs">
            <summary>
            EventArgument class for service level events during parsing
            </summary>
        </member>
        <member name="M:Google.GData.Client.ServiceEventArgs.#ctor(System.Uri,Google.GData.Client.IService)">
            <summary>
            constructor. Takes the URI and the service this event applies to
            </summary>
            <param name="uri">URI currently executed</param>
            <param name="service">service object doing the execution</param>
        </member>
        <member name="P:Google.GData.Client.ServiceEventArgs.Feed">
            <summary>the feed to be created. If this is NULL, a service 
            will create a DEFAULT atomfeed</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.ServiceEventArgs.Service">
            <summary>the service to be used for the feed to be created.</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.ServiceEventArgs.Uri">
            <summary>the Uri to be used</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.ServiceEventHandler">
            <summary>Delegate declaration for the feed creation in a service</summary> 
        </member>
        <member name="T:Google.GData.Client.GDataReturnStream">
            <summary>
            used to cover a return stream and add some additional data to it. 
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataReturnStream.#ctor(Google.GData.Client.IGDataRequest)">
            <summary>
            default constructor based on a gdatarequest object
            </summary>
            <param name="r"></param>
        </member>
        <member name="P:Google.GData.Client.GDataReturnStream.CanRead">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataReturnStream.CanSeek">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataReturnStream.CanTimeout">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataReturnStream.Close">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataReturnStream.CanWrite">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataReturnStream.Length">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataReturnStream.Position">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataReturnStream.Flush">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataReturnStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            default override, delegates to the real stream
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
        </member>
        <member name="M:Google.GData.Client.GDataReturnStream.SetLength(System.Int64)">
            <summary>
            default override, delegates to the real stream
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Google.GData.Client.GDataReturnStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            default override, delegates to the real stream
            </summary>
            <param name="buffer"></param>
            <param name="count"/>
            <param name="offset"/>
        </member>
        <member name="M:Google.GData.Client.GDataReturnStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            default override, delegates to the real stream
            </summary>
            <param name="buffer"/>
            <param name="count"/>
            <param name="offset"/>
        </member>
        <member name="P:Google.GData.Client.GDataReturnStream.Etag">
            <summary>
            implements the etag interface
            </summary>
        </member>
        <member name="T:Google.GData.Client.IService">
            <summary>base Service interface definition
            </summary> 
        </member>
        <member name="P:Google.GData.Client.IService.Credentials">
            <summary>get/set for credentials to the service calls. Gets passed through to GDatarequest</summary> 
        </member>
        <member name="P:Google.GData.Client.IService.RequestFactory">
            <summary>get/set for the GDataRequestFactory object to use</summary> 
        </member>
        <member name="P:Google.GData.Client.IService.ServiceIdentifier">
            <summary>
            returns the name of the service identifier, like wise for spreadsheets services
            </summary>
        </member>
        <member name="M:Google.GData.Client.IService.QueryOpenSearchRssDescription(System.Uri)">
            <summary>the minimal Get OpenSearchRssDescription function</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Query(Google.GData.Client.FeedQuery)">
            <summary>the minimal query implementation</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Query(Google.GData.Client.FeedQuery,System.DateTime)">
            <summary>the minimal query implementation with conditional GET</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Update(Google.GData.Client.AtomEntry)">
            <summary>simple update for atom resources</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Insert(Google.GData.Client.AtomFeed,Google.GData.Client.AtomEntry)">
            <summary>simple insert for atom entries, based on a feed</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Delete(Google.GData.Client.AtomEntry)">
            <summary>delete an entry</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Delete(System.Uri)">
            <summary>delete an entry</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Batch(Google.GData.Client.AtomFeed,System.Uri)">
            <summary>batch operation, posting of a set of entries</summary>
        </member>
        <member name="M:Google.GData.Client.IService.Update(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>simple update for media resources</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Insert(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>simple insert for media resources</summary> 
        </member>
        <member name="T:Google.GData.Client.IGDataRequestFactory">
            <summary>the one that creates GDatarequests on the service
            </summary> 
        </member>
        <member name="M:Google.GData.Client.IGDataRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>creation method for GDatarequests</summary> 
        </member>
        <member name="P:Google.GData.Client.IGDataRequestFactory.UseGZip">
            <summary>set wether or not to use gzip for new requests</summary>
        </member>
        <member name="P:Google.GData.Client.IGDataRequestFactory.UseSSL">
            <summary>
            indicates that the service should use SSL exclusively
            </summary>
        </member>
        <member name="T:Google.GData.Client.GDataRequestType">
            <summary>enum to describe the different operations on the GDataRequest
            </summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Query">
            <summary>The request is used for query</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Insert">
            <summary>The request is used for an insert</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Update">
            <summary>The request is used for an update</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Delete">
            <summary>The request is used for a delete</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Batch">
            <summary>This request is used for a batch operation</summary>
        </member>
        <member name="T:Google.GData.Client.IGDataRequest">
            <summary>Thin layer to abstract the request/response
            </summary> 
        </member>
        <member name="P:Google.GData.Client.IGDataRequest.Credentials">
            <summary>get/set for credentials to the service calls. Gets passed through to GDatarequest</summary> 
        </member>
        <member name="P:Google.GData.Client.IGDataRequest.UseGZip">
            <summary>set wether or not to use gzip for this request</summary>
        </member>
        <member name="P:Google.GData.Client.IGDataRequest.IfModifiedSince">
            <summary>set a timestamp for conditional GET</summary>
        </member>
        <member name="M:Google.GData.Client.IGDataRequest.GetRequestStream">
            <summary>gets the request stream to write into</summary> 
        </member>
        <member name="M:Google.GData.Client.IGDataRequest.Execute">
            <summary>Executes the request</summary> 
        </member>
        <member name="M:Google.GData.Client.IGDataRequest.GetResponseStream">
            <summary>gets the response stream to read from</summary> 
        </member>
        <member name="T:Google.GData.Client.ISupportsEtag">
            <summary>
            interface to indicate that an element supports an Etag. Currently implemented on AbstractEntry,
            AbstractFeed and GDataRequest
            </summary>
        </member>
        <member name="P:Google.GData.Client.ISupportsEtag.Etag">
            <summary>set the etag for updates</summary>
        </member>
        <member name="T:Google.GData.Client.IBaseWalkerAction">
            <summary>Thin layer to create an action on an item/response
            </summary> 
        </member>
        <member name="M:Google.GData.Client.IBaseWalkerAction.Go(Google.GData.Client.AtomBase)">
            <summary>the only relevant method here</summary> 
        </member>
        <member name="T:Google.GData.Client.IExtensionElementFactory">
            <summary>
            Wrapper interface used to replace the ExtensionList.
            </summary>
        </member>
        <member name="P:Google.GData.Client.IExtensionElementFactory.XmlName">
            <summary>
            returns the XML local name that is used
            </summary>
        </member>
        <member name="P:Google.GData.Client.IExtensionElementFactory.XmlNameSpace">
            <summary>
            returns the XML namespace that is processed
            </summary>
        </member>
        <member name="P:Google.GData.Client.IExtensionElementFactory.XmlPrefix">
            <summary>
            returns the xml prefix used 
            </summary>
        </member>
        <member name="M:Google.GData.Client.IExtensionElementFactory.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>
            instantiates the correct extension element
            </summary>
            <param name="node">the xmlnode to parse</param>
            <param name="parser">the atomfeedparser to use if deep parsing of subelements is required</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.IExtensionElementFactory.Save(System.Xml.XmlWriter)">
            <summary>the only relevant method here</summary> 
        </member>
        <member name="T:Google.GData.Client.IExtensionContainer">
            <summary>interface for commone extension container functionallity
            used for AtomBase and SimpleContainer
            </summary> 
        </member>
        <member name="P:Google.GData.Client.IExtensionContainer.ExtensionElements">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.IExtensionContainer.FindExtension(System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on its local name
            and its namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.IExtensionContainer.ReplaceExtension(System.String,System.String,Google.GData.Client.IExtensionElementFactory)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:Google.GData.Client.IExtensionContainer.FindExtensions(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on its local name
            and its namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>none</returns>
        </member>
        <member name="M:Google.GData.Client.IExtensionContainer.DeleteExtensions(System.String,System.String)">
            <summary>
            Deletes all Extensions from the Extension list that match
            a localName and a Namespace. 
            </summary>
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="P:Google.GData.Client.IExtensionContainer.ExtensionFactories">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.Tracing">
            <summary>Tracing helper class. Uses conditional compilation to 
             exclude tracing code in release builds</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.#ctor">
            <summary>default constructor does nothing</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.InitTracing">
            <summary>default initializer, does nothing right now</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.ExitTracing">
            <summary>Default deinitializer, closes the listener streams</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceCall(System.String,System.Diagnostics.StackFrame,System.Int32)">
            <summary>Method to trace the current call with an additional message</summary> 
            <param name="msg"> msg string to display</param>
            <param name="startFrame">the startFrame to uses</param>
            <param name="indent"> intendation</param>
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceCall(System.String)">
            <summary>Method to trace the current call with an additional message</summary> 
            <param name="msg"> msg string to display</param>
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceCall">
            <summary>Method to trace the current call with an additional message</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceInfo(System.String)">
            <summary>Method to trace the current call with an additional message</summary> 
            <param name="msg"> msg string to display</param>
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceMsg(System.String)">
            <summary>Method to trace a message</summary> 
            <param name="msg"> msg string to display</param>
        </member>
        <member name="M:Google.GData.Client.Tracing.Assert(System.Boolean,System.String)">
            <summary>Method to assert + trace a message</summary> 
            <param name="condition"> if false, raises assert</param>
            <param name="msg"> msg string to display</param>
        </member>
        <member name="T:Google.GData.Client.Utilities">
            <summary>String utilities
            </summary>
        </member>
        <member name="F:Google.GData.Client.Utilities.XSDTrue">
            <summary>
            xsd version of bool:true
            </summary>
        </member>
        <member name="F:Google.GData.Client.Utilities.XSDFalse">
            <summary>
            xsd version of bool:false
            </summary>
        </member>
        <member name="F:Google.GData.Client.Utilities.DefaultUser">
            <summary>
            default user string
            </summary>
        </member>
        <member name="M:Google.GData.Client.Utilities.#ctor">
            <summary>private constructor to prevent the compiler from generating a default one</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.IsPersistable(System.String)">
            <summary>Little helper that checks if a string is XML persistable</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.IsPersistable(Google.GData.Client.AtomUri)">
            <summary>Little helper that checks if a string is XML persistable</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.IsPersistable(System.Int32)">
            <summary>Little helper that checks if an int is XML persistable</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.IsPersistable(System.DateTime)">
            <summary>Little helper that checks if a datevalue is XML persistable</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.ConvertBooleanToXSDString(System.Boolean)">
            <summary>
            .NET treats bool as True/False as the default
            string representation. XSD requires true/false
            this method encapsulates this
            </summary>
            <param name="flag">the boolean to convert</param>
            <returns>"true" or "false"</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.ConvertToXSDString(System.Object)">
            <summary>
            .NET treats bool as True/False as the default
            string representation. XSD requires true/false
            this method encapsulates this
            </summary>
            <param name="obj">the object to convert</param>
            <returns>the string representation</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EncodeString(System.String)">
            <summary>helper to read in a string and encode it</summary> 
            <param name="content">the xmlreader string</param>
            <returns>UTF8 encoded string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EncodeStringToUtf8(System.String)">
            <summary>
            returns you a bytearray of UTF8 bytes from the string passed in
            the passed in string is assumed to be UTF16
            </summary>
            <param name="content">UTF16 string</param>
            <returns>utf 8 byte array</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EncodeSlugHeader(System.String)">
            <summary>helper to read in a string and Encode it according to 
            RFC 5023 rules for slugheaders</summary> 
            <param name="slug">the Unicode string for the slug header</param>
            <returns>ASCII  encoded string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.DecodedValue(System.String)">
            <summary>
            used as a cover method to hide the actual decoding implementation
            decodes an html decoded string
            </summary>
            <param name="value">the string to decode</param>
        </member>
        <member name="M:Google.GData.Client.Utilities.UrlDecodedValue(System.String)">
            <summary>
            used as a cover method to hide the actual decoding implementation
            decodes an URL decoded string
            </summary>
            <param name="value">the string to decode</param>
        </member>
        <member name="M:Google.GData.Client.Utilities.UriEncodeReserved(System.String)">
            <summary>helper to read in a string and replace the reserved URI 
            characters with hex encoding</summary> 
            <param name="content">the parameter string</param>
            <returns>hex encoded string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.IsWeakETag(System.String)">
            <summary>
            tests an etag for weakness. returns TRUE for weak etags and for null strings
            </summary>
            <param name="eTag"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.IsWeakETag(Google.GData.Client.ISupportsEtag)">
            <summary>
            tests an etag for weakness. returns TRUE for weak etags and for null strings
            </summary>
            <param name="ise">the element that supports an etag</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.UriEncodeUnsafe(System.String)">
            <summary>helper to read in a string and replace the reserved URI 
            characters with hex encoding</summary> 
            <param name="content">the parameter string</param>
            <returns>hex encoded string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.LocalDateInUTC(System.DateTime)">
            <summary>Method to output just the date portion as string</summary>
            <param name="dateTime">the DateTime object to output as a string</param>
            <returns>an rfc-3339 string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.LocalDateTimeInUTC(System.DateTime)">
            <summary>Method to output DateTime as string</summary>
            <param name="dateTime">the DateTime object to output as a string</param>
            <returns>an rfc-3339 string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.NextChildElement(System.Xml.XmlReader,System.Int32@)">
            <summary>
            returns the next child element of the xml reader, based on the
            depth passed in.
            </summary>
            <param name="reader">the xml reader to use</param>
            <param name="depth">the depth to start with</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FormatTimeOffset(System.TimeSpan)">
            <summary>Helper method to format a TimeSpan as a string compliant with the "time-offset" format defined in RFC-3339</summary>
            <param name="spanFromUtc">the TimeSpan to format</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FormatNumOffset(System.TimeSpan)">
            <summary>Helper method to format a TimeSpan to {HH}:{MM}</summary>
            <param name="timeSpan">the TimeSpan to format</param>
            <returns>a string in "hh:mm" format.</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.CalculateUri(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri,System.String)">
            <summary>public static string CalculateUri(string base, string inheritedBase, string local)</summary> 
            <param name="localBase">the baseUri from xml:base </param>
            <param name="inheritedBase">the pushed down baseUri from an outer element</param>
            <param name="localUri">the Uri value</param>
            <returns>the absolute Uri to use... </returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EnsureAtomNamespace(System.Xml.XmlWriter)">
            <summary>Sets the Atom namespace, if it's not already set.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <returns> the namespace prefix</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EnsureGDataNamespace(System.Xml.XmlWriter)">
            <summary>Sets the gData namespace, if it's not already set.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <returns> the namespace prefix</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EnsureGDataBatchNamespace(System.Xml.XmlWriter)">
            <summary>Sets the gDataBatch namespace, if it's not already set.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <returns> the namespace prefix</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FindToken(Google.GData.Client.TokenCollection,System.String)">
            <summary>searches tokenCollection for a specific NEXT value. 
            The collection is assume to be a key/value pair list, so if A,B,C,D is the list
            A and C are keys, B and  D are values
            </summary> 
            <param name="tokens">the TokenCollection to search</param>
            <param name="key">the key to search for</param>
            <returns> the value string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.ParseStreamInTokenCollection(System.IO.Stream)">
            <summary>converts a form response stream to a TokenCollection,
            by parsing the contents of the stream for newlines and equal signs
            the input stream is assumed to be an ascii encoded form resonse
            </summary> 
            <param name="inputStream">the stream to read and parse</param>
            <returns> the resulting TokenCollection </returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.ParseValueFormStream(System.IO.Stream,System.String)">
            <summary>parses a form response stream in token form for a specific value
            </summary> 
            <param name="inputStream">the stream to read and parse</param>
            <param name="key">the key to search for</param>
            <returns> the string in the tokenized stream </returns>
        </member>
        <member name="P:Google.GData.Client.Utilities.EmptyDate">
            <summary>returns a blank emptyDate. That's the default for an empty string date</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.FindExtension(Google.GData.Client.ExtensionList,System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="arrList">the array to search through</param>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FindExtensions(Google.GData.Client.ExtensionList,System.String,System.String,Google.GData.Client.ExtensionList)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="arrList">the array to search through</param>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <param name="arr">the array to fill</param>
            <returns>none</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FindExtensions``1(Google.GData.Client.ExtensionList,System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="arrList">the array to search through</param>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>none</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.GetAttributeValue(System.String,System.Xml.XmlNode)">
            <summary>
            save method to get an attribute value from an xmlnode
            </summary>
            <param name="attributeName"></param>
            <param name="xmlNode"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.GetAssemblyVersion">
            <summary>
            returns the current assembly version using split() instead of the version 
            attribute to avoid security issues
            </summary>
            <returns>the current assembly version as a string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.ConstructUserAgent(System.String,System.String)">
            <summary>
            returns the useragent string, including a version number
            </summary>
            <returns>the constructed userAgend in a standard form</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.QueryClientLoginToken(Google.GData.Client.GDataCredentials,System.String,System.String,System.Boolean,System.Uri)">
            <summary>goes to the Google auth service, and gets a new auth token</summary> 
            <returns>the auth token, or NULL if none received</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.QueryClientLoginToken(Google.GData.Client.GDataCredentials,System.String,System.String,System.Boolean,System.Net.IWebProxy,System.Uri)">
            <summary>goes to the Google auth service, and gets a new auth token</summary> 
            <returns>the auth token, or NULL if none received</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.getAuthException(Google.GData.Client.TokenCollection,System.Net.HttpWebResponse)">
            <summary>
             Returns the respective GDataAuthenticationException given the return
            values from the login URI handler.
            </summary>
            <param name="tokens">The tokencollection of the parsed return form</param>
            <param name="response">the  webresponse</param> 
            <returns>AuthenticationException</returns>
        </member>
        <member name="T:Google.GData.Client.TokenCollection">
            <summary>
            standard string tokenizer class. Pretty much cut/copy/paste out of MSDN. 
            </summary>
        </member>
        <member name="M:Google.GData.Client.TokenCollection.#ctor(System.String,System.Char[])">
            <summary>Constructor, takes a string and a delimiter set</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.#ctor(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>Constructor, takes a string and a delimiter set</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.CreateDictionary">
            <summary>
            creates a dictionary of tokens based on this tokencollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.TokenCollection.GetEnumerator">
            <summary>IEnumerable Interface Implementation, for the noninterface</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>IEnumerable Interface Implementation</summary> 
        </member>
        <member name="T:Google.GData.Client.TokenCollection.TokenEnumerator">
            <summary>Inner class implements IEnumerator interface</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.TokenEnumerator.#ctor(Google.GData.Client.TokenCollection)">
            <summary>Standard constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.TokenEnumerator.MoveNext">
            <summary>IEnumerable::MoveNext implementation</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.TokenEnumerator.Reset">
            <summary>IEnumerable::Reset implementation</summary> 
        </member>
        <member name="P:Google.GData.Client.TokenCollection.TokenEnumerator.Current">
            <summary>Current implementation, non interface, type-safe</summary> 
        </member>
        <member name="P:Google.GData.Client.TokenCollection.TokenEnumerator.System#Collections#IEnumerator#Current">
            <summary>Current implementation, interface, not type-safe</summary> 
        </member>
        <member name="T:Google.GData.Client.VersionDefaults">
            <summary>
            the default versions that are used. Currently, the default is still
            version 1 for most services implemented in this sdk.
            </summary>
        </member>
        <member name="F:Google.GData.Client.VersionDefaults.VersionOne">
            <summary>
            version One is 1
            </summary>
        </member>
        <member name="F:Google.GData.Client.VersionDefaults.Major">
            <summary>
            the default major is VersionOne
            </summary>
        </member>
        <member name="F:Google.GData.Client.VersionDefaults.Minor">
            <summary>
            the default Minor is 0
            </summary>
        </member>
        <member name="F:Google.GData.Client.VersionDefaults.VersionTwo">
            <summary>
            and versionTwo is a 2
            </summary>
        </member>
        <member name="F:Google.GData.Client.VersionDefaults.VersionThree">
            <summary>
            and versionThree is a 3
            </summary>
        </member>
        <member name="T:Google.GData.Client.NullVersionAware">
            <summary>
            Class used as a null version aware seed for the collections
            </summary>
        </member>
        <member name="P:Google.GData.Client.NullVersionAware.Instance">
            <summary>
            IVersionAware instance property
            </summary>
        </member>
        <member name="P:Google.GData.Client.NullVersionAware.ProtocolMajor">
            <summary>
            returns the major version of the protocol used
            </summary>
        </member>
        <member name="P:Google.GData.Client.NullVersionAware.ProtocolMinor">
            <summary>
            returns the minor version of the protocol used
            </summary>
        </member>
        <member name="T:Google.GData.Client.IVersionAware">
            <summary>
            this interface indicates that an element is aware of Core and Service
            specific version changes. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.IVersionAware.ProtocolMajor">
            <summary>
            returns the major version of the protocol this element is using
            </summary>
        </member>
        <member name="P:Google.GData.Client.IVersionAware.ProtocolMinor">
            <summary>
            returns the minor version of the protocol this element is using
            </summary>
        </member>
        <member name="M:Google.GData.Client.VersionInformation.#ctor(Google.GData.Client.IVersionAware)">
            <summary>
            construct a versioninformation object based
            on a versionaware object
            </summary>
            <param name="v">the versioned object to copy the data from</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.VersionInformation.#ctor(System.String)">
            <summary>
            construct a versioninformation object based 
            on the header string of the http request. The string
            has the form {major}.{minor}
            </summary>
            <param name="headerValue">if null creates default version</param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.VersionInformation.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.VersionInformation.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.VersionInformation.ImprintVersion(Google.GData.Client.IVersionAware)">
            <summary>
            takes an object and set's the version number to the 
            same as this instance
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Google.GData.Client.VersionInformation.ImprintVersion(Google.GData.Client.ExtensionList)">
            <summary>
            takes an object and set's the version number to the 
            same as this instance
            </summary>
            <param name="arr">The array of objects the version should be applied to</param>
        </member>
        <member name="T:Google.GData.Client.ResumableUpload.ResumableUploader">
            <summary>
            this class handles the Resumable Upload protocol
            </summary>
        </member>
        <member name="F:Google.GData.Client.ResumableUpload.ResumableUploader.CreateMediaRelation">
            <summary>
            The relationship value to be used to find the resumable 
            </summary>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.#ctor">
            <summary>
            Default constructor. Uses the default chunksize of 25 megabyte
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.#ctor(System.Int32)">
            <summary>
            ResumableUploader constructor. 
            </summary>
            <param name="chunkSize">the upload chunksize in Megabytes, needs to be greater than 0</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.GetResumableEditUri(Google.GData.Client.AtomLinkCollection)">
            <summary>
            returns the resumable edit media Uri for a given entry
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.GetResumableCreateUri(Google.GData.Client.AtomLinkCollection)">
            <summary>
            returns the resumabled create media Uri for a given entry
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.Insert(Google.GData.Client.Authenticator,Google.GData.Client.AbstractEntry)">
            <summary>
            Uploads an entry, including it's media to the uri given inside the entry. 
            </summary>
            <param name="authentication">The authentication information to be used</param>
            <param name="payload">The entry to be uploaded. This is a complete entry, including the metadata. 
            This will create a new entry on the service</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.Insert(Google.GData.Client.Authenticator,System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>
            Uploads just the media media to the uri given. 
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication">The authentication information to be used</param>
            <param name="payload">The media to uploaded.</param>
            <param name="contentType">The type of the content, e.g. text/html</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.QueryStatus(Google.GData.Client.Authenticator,System.Uri)">
            <summary>
            asks the server about the current status
            </summary>
            <param name="authentication"></param>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.AsyncInsertWorker(Google.GData.Client.ResumableUpload.AsyncResumableUploadData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method for the the resumable insert
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.Update(Google.GData.Client.Authenticator,Google.GData.Client.AbstractEntry)">
            <summary>
            Uploads an entry, including its media to the uri given inside the entry
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication">The authentication information to be used</param>
            <param name="payload">The entry to be uploaded. This is a complete entry, including the metadata. 
            This will create a new entry on the service</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.Update(Google.GData.Client.Authenticator,System.Uri,System.IO.Stream,System.String)">
            <summary>
            Uploads just the media to the uri given.
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication">The authentication information to be used</param>
            <param name="payload">The media to uploaded.</param>
            <param name="contentType">The type of the content, e.g. text/html</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.AsyncResumeWorker(Google.GData.Client.ResumableUpload.AsyncResumableUploadData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method to handle the resume operation
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.AsyncUpdateWorker(Google.GData.Client.ResumableUpload.AsyncResumableUploadData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method for the resumable update
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.UploadStream(System.String,System.Uri,Google.GData.Client.Authenticator,System.IO.Stream,System.String,Google.GData.Client.AsyncData)">
            <summary>
            Note the URI passed in here, is the session URI obtained by InitiateUpload
            </summary>
            <param name="targetUri"></param>
            <param name="authentication"></param>
            <param name="payload"></param>
            <param name="mediaType"></param>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.CopyData(System.IO.Stream,System.Net.HttpWebRequest,System.Int32,Google.GData.Client.AsyncData,System.Uri)">
            <summary>
            takes our copy of the stream, and puts it into the request stream
            returns FALSE when we are done by reaching the end of the input stream
            </summary> 
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.InitiateUpload(System.Uri,Google.GData.Client.Authenticator,System.String,System.String,System.Int64)">
            <summary>
            retrieves the resumable URI for the rest of the operation. This will initiate the 
            communication with resumable upload server by posting against the starting URI
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication"></param>
            <param name="entry"></param>
            <returns>The uri to be used for the rest of the operation</returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.InitiateUpload(System.Uri,Google.GData.Client.Authenticator,System.String,System.String,System.Int64,System.String)">
            <summary>
            retrieves the resumable URI for the rest of the operation. This will initiate the 
            communication with resumable upload server by posting against the starting URI
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication"></param>
            <param name="entry"></param>
            <returns>The uri to be used for the rest of the operation</returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.InitiateUpload(System.Uri,Google.GData.Client.Authenticator,Google.GData.Client.AbstractEntry)">
            <summary>
            retrieves the resumable URI for the rest of the operation. This will initiate the 
            communication with resumable upload server by posting against the starting URI
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication"></param>
            <param name="entry"></param>
            <returns>The uri to be used for the rest of the operation</returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.InitiateUpload(System.Uri,Google.GData.Client.Authenticator,Google.GData.Client.AbstractEntry,System.String)">
            <summary>
            retrieves the resumable URI for the rest of the operation. This will initiate the 
            communication with resumable upload server by posting against the starting URI
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication"></param>
            <param name="entry"></param>
            <returns>The uri to be used for the rest of the operation</returns>
        </member>
        <member name="M:Google.GData.Client.ResumableUpload.ResumableUploader.AsyncStarter(Google.GData.Client.ResumableUpload.AsyncResumableUploadData,Google.GData.Client.ResumableUpload.ResumableUploader.WorkerResumableUploadHandler,System.Object)">
            <summary>
            starts the async job
            </summary>
            <param name="data"></param>
            <param name="userData"></param>
            <param name="workerDelegate"></param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Client.ServiceNames">
            <summary>
            this is the static collection of all google service names
            </summary>
        </member>
        <member name="T:Google.GData.Client.Authenticator">
            <summary>
            Base authentication class. Takes credentials and applicationname
            and is able to create a HttpWebRequest augmented with the right
            authentication
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Authenticator.#ctor(System.String)">
            <summary>
            an unauthenticated use case
            </summary>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Authenticator.CreateHttpWebRequest(System.String,System.Uri)">
            <summary>
            Creates a HttpWebRequest object that can be used against a given service. 
            for a RequestSetting object that is using client login, this might call 
            to get an authentication token from the service, if it is not already set.
            
            if this uses client login, and you need to use a proxy, set the application wide
            proxy first using the GlobalProxySelection
            </summary>
            <param name="serviceName"></param>
            <param name="httpMethod"></param>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Authenticator.Application">
            <summary>
            returns the application name
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.Authenticator.DeveloperKey">
            <summary>
            primarily for YouTube. allows you to set the developer key used
            </summary>
        </member>
        <member name="M:Google.GData.Client.Authenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to 
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Authenticator.ApplyAuthenticationToUri(System.Uri)">
            <summary>
            Takes an existing httpwebrequest and modifies its uri according to 
            the authentication system used. Only overridden in 2-leggedoauth case
            </summary>
            <param name="source">the original uri</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ClientLoginAuthenticator.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            a constructor for client login use cases
            </summary>
            <param name="applicationName"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ClientLoginAuthenticator.#ctor(System.String,System.String,Google.GData.Client.GDataCredentials)">
            <summary>
            a constructor for client login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="credentials">the user credentials</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ClientLoginAuthenticator.#ctor(System.String,System.String,Google.GData.Client.GDataCredentials,System.Uri)">
            <summary>
            a constructor for client login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="credentials">the user credentials</param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.ClientLoginAuthenticator.Credentials">
            <summary>
            returns the Credentials in case of a client login scenario
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.ClientLoginAuthenticator.Service">
            <summary>
            returns the service this authenticator is working against
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.ClientLoginAuthenticator.LoginHandler">
            <summary>
            returns the loginhandler that is used to acquire the token from
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.ClientLoginAuthenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubAuthenticator.#ctor(System.String,System.String)">
            <summary>
            a constructor for a web application authentication scenario
            </summary>
            <param name="applicationName"></param>
            <param name="authSubToken"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubAuthenticator.#ctor(System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            a constructor for a web application authentication scenario
            </summary>
            <param name="applicationName"></param>
            <param name="authSubToken"></param>
            <param name="privateKey"></param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.AuthSubAuthenticator.Token">
            <summary>
            returns the authsub token to use for a webapplication scenario
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.AuthSubAuthenticator.PrivateKey">
            <summary>
            returns the private key used for authsub authentication
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubAuthenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.OAuthAuthenticator.ConsumerKey">
            <summary>
            returns the ConsumerKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.OAuthAuthenticator.ConsumerSecret">
            <summary>
            returns the ConsumerSecret
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuth2LeggedAuthenticator.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            a constructor for 2-legged OAuth
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="consumerKey">the consumerKey to use</param>
            <param name="consumerSecret">the consumerSecret to use</param>
            <param name="user">the username to use</param>
            <param name="domain">the domain to use</param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.OAuth2LeggedAuthenticator.OAuthUser">
            <summary>
            returns the OAuth User
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.OAuth2LeggedAuthenticator.OAuthDomain">
            <summary>
            returns the OAuth Domain
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuth2LeggedAuthenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuth2LeggedAuthenticator.ApplyAuthenticationToUri(System.Uri)">
            <summary>
            Takes an existing httpwebrequest and modifies its uri according to 
            the authentication system used. Only overridden in 2-legged OAuth case
            Here we need to add the xoauth_requestor_id parameter
            </summary>
            <param name="source">the original uri</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuth3LeggedAuthenticator.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            a constructor for 3-legged OAuth
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="consumerKey">the consumerKey to use</param>
            <param name="consumerSecret">the consumerSecret to use</param>
            <param name="token">The token to be used</param>
            <param name="tokenSecret">The tokenSecret to be used</param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.OAuth3LeggedAuthenticator.Token">
            <summary>
            returns the Token for oAuth
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.OAuth3LeggedAuthenticator.TokenSecret">
            <summary>
            returns the TokenSecret for oAuth
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuth3LeggedAuthenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuth2Authenticator.#ctor(System.String,Google.GData.Client.OAuth2Parameters)">
            <summary>
            a constructor for OAuth 2.0
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="consumerKey">the consumerKey to use</param>
            <param name="consumerSecret">the consumerSecret to use</param>
            <param name="token">The token to be used</param>
            <param name="tokenSecret">The tokenSecret to be used</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.OAuth2Authenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Google.GData.Extensions.AppControl.AppControl">
            <summary>
            app:control schema extension
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.AppControl.AppControl.#ctor">
            <summary>
            default constructor for app:control
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.AppControl.AppControl.#ctor(System.String)">
            <summary>
            app:control constructor with namespace as parameter
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.AppControl.AppControl.Draft">
            <summary>
            returns the app:draft element
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.AppControl.AppControl.VersionInfoChanged">
            <summary>
            need so setup the namespace based on the version information     
            </summary>
        </member>
        <member name="T:Google.GData.Extensions.AppControl.AppDraft">
            <summary>
            app:draft schema extension describing that an entry is in draft mode
            it's a child of app:control
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.AppControl.AppDraft.#ctor">
            <summary>
            default constructor for app:draft
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.AppControl.AppDraft.#ctor(System.Boolean)">
            <summary>
            default constructor for app:draft
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.AppControl.AppDraft.BooleanValue">
            <summary>
             Accessor Method for the value as integer
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.AppControl.AppDraft.VersionInfoChanged">
            <summary>
            need so setup the namespace based on the version information
            changes
            </summary>
        </member>
        <member name="T:Google.GData.Extensions.AppControl.AppEdited">
            <summary>
            The "app:edited" element is a Date construct (as defined by
            [RFC4287]), whose content indicates the last time an Entry was
            edited.  If the entry has not been edited yet, the content indicates
            the time it was created.  Atom Entry elements in Collection Documents
            SHOULD contain one app:edited element, and MUST NOT contain more than
            one.
            The server SHOULD change the value of this element every time an
            Entry Resource or an associated Media Resource has been edited
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.AppControl.AppEdited.#ctor">
            <summary>
            creates a default app:edited element
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.AppControl.AppEdited.#ctor(System.DateTime)">
            <summary>
            creates a default app:edited element with the given datetime value
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.AppControl.AppEdited.#ctor(System.String)">
            <summary>
            creates an app:edited element with the string as it's
            default value. The string has to conform to RFC4287
            </summary>
            <param name="dateInUtc"></param>
        </member>
        <member name="P:Google.GData.Extensions.AppControl.AppEdited.DateValue">
            <summary>
             Accessor Method for the value as a DateTime
            </summary>
        </member>
        <member name="F:Google.GData.Extensions.BatchErrors.errors">
            <summary>
            Error collection
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.BatchErrors.#ctor">
            <summary>
            default constructor for gd:errors
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.BatchErrors.Errors">
            <summary>
            Error collection.
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.BatchError.#ctor">
            <summary>
            default constructor for gd:error
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.BatchError.Domain">
            <summary>
            returns the gd:domain
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.BatchError.Code">
            <summary>
            returns the gd:code
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.BatchError.Location">
            <summary>
            returns the gd:location
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.BatchError.InternalReason">
            <summary>
            returns the gd:internalReason
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.BatchError.Id">
            <summary>
            returns the id
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.BatchErrorDomain.#ctor">
            <summary>
            default constructor for gd:domain
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.BatchErrorCode.#ctor">
            <summary>
            default constructor for gd:code
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.BatchErrorLocation.#ctor">
            <summary>
            default constructor for gd:location
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.BatchErrorLocation.Type">
            <summary>
            Type property accessor
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.BatchErrorInternalReason.#ctor">
            <summary>
            default constructor for gd:internalReason
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.BatchErrorId.#ctor">
            <summary>
            default constructor for id
            </summary>
        </member>
        <member name="T:Google.GData.Extensions.ExtensionBase">
            <summary>
            Extensible type used in many places.
            </summary>
        </member>
        <member name="F:Google.GData.Extensions.ExtensionBase.attributes">
            <summary>
            this holds the attribute list for an extension element
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="P:Google.GData.Extensions.ExtensionBase.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Extensions.ExtensionBase.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.VersionInfoChanged">
            <summary>
            virtual to be overloaded by subclasses which are interested in reacting on versioninformation
            changes
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.SetXmlNamespace(System.String)">
            <summary>
            method for subclasses who need to change a namespace for parsing/persistence during runtime
            </summary>
            <param name="ns"></param>
        </member>
        <member name="P:Google.GData.Extensions.ExtensionBase.Attributes">
            <summary>accesses the Attribute list. The keys are the attribute names
            the values the attribute values</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Extensions.ExtensionBase.AttributeNamespaces">
            <summary>accesses the Attribute list. The keys are the attribute names
            the values the attribute values</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.getAttributes">
            <summary>
            returns the attributes list
            </summary>
            <returns>SortedList</returns>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.getAttributeNamespaces">
            <summary>
            returns the attribute namespace list
            </summary>
            <returns>SortedList</returns>
        </member>
        <member name="P:Google.GData.Extensions.ExtensionBase.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:Google.GData.Extensions.ExtensionBase.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:Google.GData.Extensions.ExtensionBase.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.ToString">
            <summary>
            debugging helper
            </summary>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Extensions.ExtensionBase.ChildNodes">
            <summary>
            returns the list of childnodes that are unknown to the extension
            used for example for the GD:ExtendedProperty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create an instance of this  object.</summary> 
            <param name="node">the xml parses node, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created IExtensionElement object</returns>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.ProcessChildNodes(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>
            used to copy the unknown childnodes for later saving
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.InitInstance(Google.GData.Extensions.ExtensionBase)">
            <summary>
            used to copy the attribute lists over
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.ProcessAttributes(System.Xml.XmlNode)">
            <summary>
            default method override to handle attribute processing
            the base implementation does process the attributes list
            and reads all that are in there.
            </summary>
            <param name="node">XmlNode with attributes</param>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the EnumConstruct object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionBase.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>
            a subclass that want's to save addtional XML would need to overload this
            the default implementation does nothing
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Google.GData.Extensions.SimpleContainer">
            <summary>
            base class to implement extensions holding extensions
            TODO: at one point think about using this as the base for atom:base
            as there is some utility overlap between the 2 of them
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="P:Google.GData.Extensions.SimpleContainer.ExtensionElements">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.FindExtension(System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on its local name
            and its namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implrment ExtensionElementFactory, they will not be taken into account
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.ReplaceExtension(System.String,System.String,Google.GData.Client.IExtensionElementFactory)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.ReplaceFactory(System.String,System.String,Google.GData.Client.IExtensionElementFactory)">
            <summary>
            all extension element factories that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.FindExtensions(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on its local name
            and its namespace. If namespace is NULL, all where
            the localname matches is found. If there are extensionelements that do 
            not implrment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>none</returns>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.FindExtensions``1(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on its local name
            and its namespace. If namespace is NULL, all where
            the localname matches is found. If there are extensionelements that do 
            not implement ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>none</returns>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.DeleteExtensions(System.String,System.String)">
            <summary>
            Deletes all Extensions from the Extension list that match
            a localName and a Namespace. 
            </summary>
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="P:Google.GData.Extensions.SimpleContainer.ExtensionFactories">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Who object.</summary> 
            <param name="node">the node to work on, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created SimpleElement object</returns>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.VersionInfoChanged">
            <summary>
            need so setup the namespace based on the version information     
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.ProcessChildNodes(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>
            used to copy the unknown childnodes for later saving
            </summary>
            <param name="node">the node to process</param>
            <param name="parser">the feed parser to pass down if need be</param>
        </member>
        <member name="M:Google.GData.Extensions.SimpleContainer.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>
            saves out the inner xml, so all of our subelements
            gets called from Save, whcih takes care of saving attributes
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Google.GData.Extensions.SimpleElement">
            <summary>
            Extensible enum type used in many places.
            compared to the base class, this one
            adds a default value which is the text content inside the 
            element node.
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.SimpleElement.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="M:Google.GData.Extensions.SimpleElement.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
            <param name="value">the intial value</param>
        </member>
        <member name="P:Google.GData.Extensions.SimpleElement.Value">
            <summary>
            Accessor Method for the value as string
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.SimpleElement.IntegerValue">
            <summary>
            Accessor Method for the value as integer
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.SimpleElement.UnsignedIntegerValue">
            <summary>
            Accessor Method for the value as unsigned integer
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.SimpleElement.UnsignedLongValue">
            <summary>
            Accessor Method for the value as unsigned long
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.SimpleElement.FloatValue">
            <summary>
            Accessor Method for the value as float
            </summary>
        </member>
        <member name="P:Google.GData.Extensions.SimpleElement.BooleanValue">
            <summary>
            Accessor Method for the value as boolean
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.SimpleElement.ToString">
            <summary>
            debugging helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Extensions.SimpleElement.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create an instance object.</summary> 
            <param name="node">the parsed xml node, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created SimpleElement object</returns>
        </member>
        <member name="M:Google.GData.Extensions.SimpleElement.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>
            saves the value, is called from Save
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Google.GData.Extensions.SimpleAttribute">
            <summary>
            a simple element with one attribute, called value, that exposes 
            the given value as the Value property
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.SimpleAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="M:Google.GData.Extensions.SimpleAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
            <param name="value">the initial value</param>
        </member>
        <member name="P:Google.GData.Extensions.SimpleAttribute.Value">
            <summary>Accessor for "value" attribute.</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Extensions.SimpleNameValueAttribute">
            <summary>
            a simple element with two attributes, called value and name, that exposes 
            the given value as the Value property
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.SimpleNameValueAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="P:Google.GData.Extensions.SimpleNameValueAttribute.Name">
            <summary>Accessor for "name" attribute.</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Extensions.XmlExtension">
            <summary>
            placeholder object for an unknown XML extension element
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.XmlExtension.#ctor(System.Xml.XmlNode)">
            <summary>
            Default constructor for an XmlExtension, just takes
            the xmlnode that should be used in the extension element
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Google.GData.Extensions.XmlExtension.Node">
            <summary>accessor method public XmlNode Node</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Extensions.XmlExtension.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:Google.GData.Extensions.XmlExtension.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:Google.GData.Extensions.XmlExtension.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="M:Google.GData.Extensions.XmlExtension.ToString">
            <summary>
            debugging helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Extensions.XmlExtension.op_Implicit(Google.GData.Extensions.XmlExtension)~System.Xml.XmlNode">
            <summary>
            Allows an XmlExtension to be cast directly into an xmlnode
            this should avoid or at least ease code breakage for clients relying on XmlNodes
            in the extensionelements
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Extensions.XmlExtension.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create an instance of this  object.</summary> 
            <param name="node">the xml parses node, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created IExtensionElement object</returns>
        </member>
        <member name="M:Google.GData.Extensions.XmlExtension.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the XmlExtension
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="T:Google.GData.Extensions.ExtensionCollection`1">
            <summary>
            base class to take an object pointer with extension information
            and expose a localname/namespace subset as a collection
            that still works on the original
            </summary>
        </member>
        <member name="F:Google.GData.Extensions.ExtensionCollection`1.container">
            <summary>holds the owning feed</summary>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.CtorXmlName">
            <summary>
            Get the XmlName for the Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.CtorXmlNS">
            <summary>
            Get the Xml Namespace for the Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.#ctor">
            <summary>
            protected default constructor, not usable by outside
            </summary>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.#ctor(Google.GData.Client.IExtensionContainer)">
            <summary>
            takes the base object, and the localname/ns combo to look for
            will copy objects to an internal array for caching. Note that when the external 
            ExtensionList is modified, this will have no effect on this copy
            </summary>
            <param name="containerElement">the base element holding the extension list</param>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.#ctor(Google.GData.Client.IExtensionContainer,System.String,System.String)">
            <summary>
            takes the base object, and the localname/ns combo to look for
            will copy objects to an internal array for caching. Note that when the external 
            ExtensionList is modified, this will have no effect on this copy
            </summary>
            <param name="containerElement">the base element holding the extension list</param>
            <param name="localName">the local name of the extension</param>
            <param name="ns">the namespace</param>
        </member>
        <member name="P:Google.GData.Extensions.ExtensionCollection`1.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.setItem(System.Int32,`0)">
            <summary>
            useful for subclasses that want to overload the set method
            </summary>
            <param name="index">the index in the array</param>
            <param name="item">the item to set </param>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.Add(`0)">
            <summary>
            default untyped add implementation. Adds the object as well to the parent
            object ExtensionList
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.Insert(System.Int32,`0)">
            <summary>
            inserts an element into the collection by index
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.Remove(`0)">
            <summary>
            removes an element from the collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.IndexOf(`0)">
            <summary>standard typed indexOf method </summary>
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.Contains(`0)">
            <summary>standard typed Contains method </summary> 
        </member>
        <member name="M:Google.GData.Extensions.ExtensionCollection`1.OnClear">
            <summary>standard override OnClear, to remove the objects from the extension list</summary> 
        </member>
    </members>
</doc>
